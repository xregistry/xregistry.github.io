{
  "capabilities": {
    "apis": [
      "/capabilities",
      "/export",
      "/model",
      "/modelsource"
    ],
    "flags": null,
    "mutable": null,
    "pagination": false,
    "shortself": false,
    "specversions": [
      "1.0-rc2"
    ],
    "stickyversions": true
  },
  "createdat": "2025-08-20T15:03:32.033785675Z",
  "epoch": 7,
  "modelsource": {
    "groups": {
      "xregistryspecs": {
        "plural": "xregistryspecs",
        "singular": "xregistryspec",
        "resources": {
          "docs": {
            "plural": "docs",
            "singular": "doc"
          },
          "samples": {
            "plural": "samples",
            "singular": "sample"
          },
          "schemas": {
            "plural": "schemas",
            "singular": "schema"
          }
        }
      }
    }
  },
  "modifiedat": "2025-08-20T15:03:35.561599292Z",
  "registryid": "xRegistry",
  "self": "#/",
  "specversion": "1.0-rc2",
  "xid": "/",
  "xregistryspecs": {
    "cloudevents-v1": {
      "xregistryspecid": "cloudevents-v1",
      "self": "#/xregistryspecs/cloudevents-v1",
      "xid": "/xregistryspecs/cloudevents-v1",
      "epoch": 14,
      "createdat": "2025-08-20T15:03:32.989222081Z",
      "modifiedat": "2025-08-20T15:03:33.778021982Z",
      "docsurl": "#/xregistryspecs/cloudevents-v1/docs",
      "docs": {
        "model.json": {
          "docid": "model.json",
          "self": "#/xregistryspecs/cloudevents-v1/docs/model.json",
          "xid": "/xregistryspecs/cloudevents-v1/docs/model.json",
          "metaurl": "#/xregistryspecs/cloudevents-v1/docs/model.json/meta",
          "meta": {
            "docid": "model.json",
            "self": "#/xregistryspecs/cloudevents-v1/docs/model.json/meta",
            "xid": "/xregistryspecs/cloudevents-v1/docs/model.json/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:32.989222081Z",
            "modifiedat": "2025-08-20T15:03:32.989222081Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/cloudevents-v1/docs/model.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/cloudevents-v1/docs/model.json/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "model.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/cloudevents-v1/docs/model.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/cloudevents-v1/docs/model.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:32.989222081Z",
              "modifiedat": "2025-08-20T15:03:32.989222081Z",
              "ancestor": "v1.0-rc1",
              "docbase64": "ewogICIkc2NoZW1hIjogImh0dHBzOi8veHJlZ2lzdHJ5LmlvL3hyZWdpc3RyeXNwZWNzL2NvcmUtdjEvc2NoZW1hcy9tb2RlbC5zY2hlbWEuanNvbiIsCiAgImdyb3VwcyI6IHsKICAgICIkaW5jbHVkZXMiOiBbCiAgICAgICIuLi9lbmRwb2ludC9tb2RlbC5qc29uI2dyb3VwcyIsCiAgICAgICIuLi9tZXNzYWdlL21vZGVsLmpzb24jZ3JvdXBzIiwKICAgICAgIi4uL3NjaGVtYS9tb2RlbC5qc29uI2dyb3VwcyIKICAgIF0KICB9Cn0K"
            }
          },
          "versionscount": 1
        },
        "spec.md": {
          "docid": "spec.md",
          "self": "#/xregistryspecs/cloudevents-v1/docs/spec.md",
          "xid": "/xregistryspecs/cloudevents-v1/docs/spec.md",
          "metaurl": "#/xregistryspecs/cloudevents-v1/docs/spec.md/meta",
          "meta": {
            "docid": "spec.md",
            "self": "#/xregistryspecs/cloudevents-v1/docs/spec.md/meta",
            "xid": "/xregistryspecs/cloudevents-v1/docs/spec.md/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:33.053545098Z",
            "modifiedat": "2025-08-20T15:03:33.053545098Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/cloudevents-v1/docs/spec.md/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/cloudevents-v1/docs/spec.md/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "spec.md",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/cloudevents-v1/docs/spec.md/versions/v1.0-rc1",
              "xid": "/xregistryspecs/cloudevents-v1/docs/spec.md/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:33.053545098Z",
              "modifiedat": "2025-08-20T15:03:33.053545098Z",
              "ancestor": "v1.0-rc1",
              "docbase64": ""
            }
          },
          "versionscount": 1
        }
      },
      "docscount": 2,
      "samplesurl": "#/xregistryspecs/cloudevents-v1/samples",
      "samples": {
        "contoso-erp-jsons07.xreg.json": {
          "sampleid": "contoso-erp-jsons07.xreg.json",
          "self": "#/xregistryspecs/cloudevents-v1/samples/contoso-erp-jsons07.xreg.json",
          "xid": "/xregistryspecs/cloudevents-v1/samples/contoso-erp-jsons07.xreg.json",
          "metaurl": "#/xregistryspecs/cloudevents-v1/samples/contoso-erp-jsons07.xreg.json/meta",
          "meta": {
            "sampleid": "contoso-erp-jsons07.xreg.json",
            "self": "#/xregistryspecs/cloudevents-v1/samples/contoso-erp-jsons07.xreg.json/meta",
            "xid": "/xregistryspecs/cloudevents-v1/samples/contoso-erp-jsons07.xreg.json/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:33.31096841Z",
            "modifiedat": "2025-08-20T15:03:33.31096841Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/cloudevents-v1/samples/contoso-erp-jsons07.xreg.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/cloudevents-v1/samples/contoso-erp-jsons07.xreg.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "contoso-erp-jsons07.xreg.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/cloudevents-v1/samples/contoso-erp-jsons07.xreg.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/cloudevents-v1/samples/contoso-erp-jsons07.xreg.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:33.31096841Z",
              "modifiedat": "2025-08-20T15:03:33.31096841Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": ""
            }
          },
          "versionscount": 1
        },
        "inkjet-proto3.xreg.json": {
          "sampleid": "inkjet-proto3.xreg.json",
          "self": "#/xregistryspecs/cloudevents-v1/samples/inkjet-proto3.xreg.json",
          "xid": "/xregistryspecs/cloudevents-v1/samples/inkjet-proto3.xreg.json",
          "metaurl": "#/xregistryspecs/cloudevents-v1/samples/inkjet-proto3.xreg.json/meta",
          "meta": {
            "sampleid": "inkjet-proto3.xreg.json",
            "self": "#/xregistryspecs/cloudevents-v1/samples/inkjet-proto3.xreg.json/meta",
            "xid": "/xregistryspecs/cloudevents-v1/samples/inkjet-proto3.xreg.json/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:33.372118454Z",
            "modifiedat": "2025-08-20T15:03:33.372118454Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/cloudevents-v1/samples/inkjet-proto3.xreg.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/cloudevents-v1/samples/inkjet-proto3.xreg.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "inkjet-proto3.xreg.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/cloudevents-v1/samples/inkjet-proto3.xreg.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/cloudevents-v1/samples/inkjet-proto3.xreg.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:33.372118454Z",
              "modifiedat": "2025-08-20T15:03:33.372118454Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": ""
            }
          },
          "versionscount": 1
        },
        "lightbulb-avro.xreg.json": {
          "sampleid": "lightbulb-avro.xreg.json",
          "self": "#/xregistryspecs/cloudevents-v1/samples/lightbulb-avro.xreg.json",
          "xid": "/xregistryspecs/cloudevents-v1/samples/lightbulb-avro.xreg.json",
          "metaurl": "#/xregistryspecs/cloudevents-v1/samples/lightbulb-avro.xreg.json/meta",
          "meta": {
            "sampleid": "lightbulb-avro.xreg.json",
            "self": "#/xregistryspecs/cloudevents-v1/samples/lightbulb-avro.xreg.json/meta",
            "xid": "/xregistryspecs/cloudevents-v1/samples/lightbulb-avro.xreg.json/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:33.428773409Z",
            "modifiedat": "2025-08-20T15:03:33.428773409Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/cloudevents-v1/samples/lightbulb-avro.xreg.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/cloudevents-v1/samples/lightbulb-avro.xreg.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "lightbulb-avro.xreg.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/cloudevents-v1/samples/lightbulb-avro.xreg.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/cloudevents-v1/samples/lightbulb-avro.xreg.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:33.428773409Z",
              "modifiedat": "2025-08-20T15:03:33.428773409Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": ""
            }
          },
          "versionscount": 1
        },
        "schemastore_org.xreg.json": {
          "sampleid": "schemastore_org.xreg.json",
          "self": "#/xregistryspecs/cloudevents-v1/samples/schemastore_org.xreg.json",
          "xid": "/xregistryspecs/cloudevents-v1/samples/schemastore_org.xreg.json",
          "metaurl": "#/xregistryspecs/cloudevents-v1/samples/schemastore_org.xreg.json/meta",
          "meta": {
            "sampleid": "schemastore_org.xreg.json",
            "self": "#/xregistryspecs/cloudevents-v1/samples/schemastore_org.xreg.json/meta",
            "xid": "/xregistryspecs/cloudevents-v1/samples/schemastore_org.xreg.json/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:33.778021982Z",
            "modifiedat": "2025-08-20T15:03:33.778021982Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/cloudevents-v1/samples/schemastore_org.xreg.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/cloudevents-v1/samples/schemastore_org.xreg.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "schemastore_org.xreg.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/cloudevents-v1/samples/schemastore_org.xreg.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/cloudevents-v1/samples/schemastore_org.xreg.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:33.778021982Z",
              "modifiedat": "2025-08-20T15:03:33.778021982Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": ""
            }
          },
          "versionscount": 1
        },
        "smartoven-xsd.xreg.json": {
          "sampleid": "smartoven-xsd.xreg.json",
          "self": "#/xregistryspecs/cloudevents-v1/samples/smartoven-xsd.xreg.json",
          "xid": "/xregistryspecs/cloudevents-v1/samples/smartoven-xsd.xreg.json",
          "metaurl": "#/xregistryspecs/cloudevents-v1/samples/smartoven-xsd.xreg.json/meta",
          "meta": {
            "sampleid": "smartoven-xsd.xreg.json",
            "self": "#/xregistryspecs/cloudevents-v1/samples/smartoven-xsd.xreg.json/meta",
            "xid": "/xregistryspecs/cloudevents-v1/samples/smartoven-xsd.xreg.json/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:33.48729355Z",
            "modifiedat": "2025-08-20T15:03:33.48729355Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/cloudevents-v1/samples/smartoven-xsd.xreg.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/cloudevents-v1/samples/smartoven-xsd.xreg.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "smartoven-xsd.xreg.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/cloudevents-v1/samples/smartoven-xsd.xreg.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/cloudevents-v1/samples/smartoven-xsd.xreg.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:33.48729355Z",
              "modifiedat": "2025-08-20T15:03:33.48729355Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": ""
            }
          },
          "versionscount": 1
        },
        "vacuumcleaner-avro.xreg.json": {
          "sampleid": "vacuumcleaner-avro.xreg.json",
          "self": "#/xregistryspecs/cloudevents-v1/samples/vacuumcleaner-avro.xreg.json",
          "xid": "/xregistryspecs/cloudevents-v1/samples/vacuumcleaner-avro.xreg.json",
          "metaurl": "#/xregistryspecs/cloudevents-v1/samples/vacuumcleaner-avro.xreg.json/meta",
          "meta": {
            "sampleid": "vacuumcleaner-avro.xreg.json",
            "self": "#/xregistryspecs/cloudevents-v1/samples/vacuumcleaner-avro.xreg.json/meta",
            "xid": "/xregistryspecs/cloudevents-v1/samples/vacuumcleaner-avro.xreg.json/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:33.546279224Z",
            "modifiedat": "2025-08-20T15:03:33.546279224Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/cloudevents-v1/samples/vacuumcleaner-avro.xreg.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/cloudevents-v1/samples/vacuumcleaner-avro.xreg.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "vacuumcleaner-avro.xreg.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/cloudevents-v1/samples/vacuumcleaner-avro.xreg.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/cloudevents-v1/samples/vacuumcleaner-avro.xreg.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:33.546279224Z",
              "modifiedat": "2025-08-20T15:03:33.546279224Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": ""
            }
          },
          "versionscount": 1
        },
        "watchkam-jsons07.xreg.json": {
          "sampleid": "watchkam-jsons07.xreg.json",
          "self": "#/xregistryspecs/cloudevents-v1/samples/watchkam-jsons07.xreg.json",
          "xid": "/xregistryspecs/cloudevents-v1/samples/watchkam-jsons07.xreg.json",
          "metaurl": "#/xregistryspecs/cloudevents-v1/samples/watchkam-jsons07.xreg.json/meta",
          "meta": {
            "sampleid": "watchkam-jsons07.xreg.json",
            "self": "#/xregistryspecs/cloudevents-v1/samples/watchkam-jsons07.xreg.json/meta",
            "xid": "/xregistryspecs/cloudevents-v1/samples/watchkam-jsons07.xreg.json/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:33.602666834Z",
            "modifiedat": "2025-08-20T15:03:33.602666834Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/cloudevents-v1/samples/watchkam-jsons07.xreg.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/cloudevents-v1/samples/watchkam-jsons07.xreg.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "watchkam-jsons07.xreg.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/cloudevents-v1/samples/watchkam-jsons07.xreg.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/cloudevents-v1/samples/watchkam-jsons07.xreg.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:33.602666834Z",
              "modifiedat": "2025-08-20T15:03:33.602666834Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": ""
            }
          },
          "versionscount": 1
        },
        "waterboiler-mqtt5-jsons07.xreg.json": {
          "sampleid": "waterboiler-mqtt5-jsons07.xreg.json",
          "self": "#/xregistryspecs/cloudevents-v1/samples/waterboiler-mqtt5-jsons07.xreg.json",
          "xid": "/xregistryspecs/cloudevents-v1/samples/waterboiler-mqtt5-jsons07.xreg.json",
          "metaurl": "#/xregistryspecs/cloudevents-v1/samples/waterboiler-mqtt5-jsons07.xreg.json/meta",
          "meta": {
            "sampleid": "waterboiler-mqtt5-jsons07.xreg.json",
            "self": "#/xregistryspecs/cloudevents-v1/samples/waterboiler-mqtt5-jsons07.xreg.json/meta",
            "xid": "/xregistryspecs/cloudevents-v1/samples/waterboiler-mqtt5-jsons07.xreg.json/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:33.660014341Z",
            "modifiedat": "2025-08-20T15:03:33.660014341Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/cloudevents-v1/samples/waterboiler-mqtt5-jsons07.xreg.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/cloudevents-v1/samples/waterboiler-mqtt5-jsons07.xreg.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "waterboiler-mqtt5-jsons07.xreg.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/cloudevents-v1/samples/waterboiler-mqtt5-jsons07.xreg.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/cloudevents-v1/samples/waterboiler-mqtt5-jsons07.xreg.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:33.660014341Z",
              "modifiedat": "2025-08-20T15:03:33.660014341Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": "ewogICAgImVuZHBvaW50cyI6IHsKICAgICAgICAiV2F0ZXJCb2lsZXIuUHJvZHVjZXIiOiB7CiAgICAgICAgICAgICJ1c2FnZSI6IFsgInByb2R1Y2VyIiBdLAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiUHJvZHVjZXIgZW5kcG9pbnQgZm9yIHdhdGVyIGJvaWxlciBjb21tYW5kcyIsCiAgICAgICAgICAgICJwcm90b2NvbCI6ICJNUVRULzUuMCIsCiAgICAgICAgICAgICJwcm90b2NvbG9wdGlvbnMiOiB7CiAgICAgICAgICAgICAgICAiZW5kcG9pbnRzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgInVyaSI6ICJtcXR0Oi8vbXF0dGJyb2tlcjEuZXhhbXBsZS5jb206MTg4MyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJtZXNzYWdlZ3JvdXBzIjogWwogICAgICAgICAgICAgICAgIi9tZXNzYWdlZ3JvdXBzL1dhdGVyQm9pbGVyLkV2ZW50cyIKICAgICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgIldhdGVyQm9pbGVyLkNvbnN1bWVyIjogewogICAgICAgICAgICAidXNhZ2UiOiBbICJjb25zdW1lciIgXSwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkNvbnN1bWVyIGVuZHBvaW50IGZvciB3YXRlciBib2lsZXIgZXZlbnRzIiwKICAgICAgICAgICAgInByb3RvY29sIjogIk1RVFQvNS4wIiwKICAgICAgICAgICAgInByb3RvY29sb3B0aW9ucyI6IHsKICAgICAgICAgICAgICAgICJlbmRwb2ludHMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAidXJpIjogIm1xdHQ6Ly9tcXR0YnJva2VyMS5leGFtcGxlLmNvbToxODgzIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgIm1lc3NhZ2Vncm91cHMiOiBbCiAgICAgICAgICAgICAgICAiL21lc3NhZ2Vncm91cHMvV2F0ZXJCb2lsZXIuRXZlbnRzIgogICAgICAgICAgICBdCiAgICAgICAgfQogICAgfSwKICAgICJtZXNzYWdlZ3JvdXBzIjogewogICAgICAgICJXYXRlckJvaWxlci5FdmVudHMiOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJFdmVudHMgZm9yIHdhdGVyIGJvaWxlciBvcGVyYXRpb25zIiwKICAgICAgICAgICAgInByb3RvY29sIjogIk1RVFQvNS4wIiwKICAgICAgICAgICAgIm1lc3NhZ2VzIjogewogICAgICAgICAgICAgICAgIldhdGVyQm9pbGVyLlRlbXBlcmF0dXJlVXBkYXRlIjogewogICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJFdmVudCBmb3Igd2F0ZXIgYm9pbGVyIHRlbXBlcmF0dXJlIHVwZGF0ZSIsCiAgICAgICAgICAgICAgICAgICAgInByb3RvY29sIjogIk1RVFQvNS4wIiwKICAgICAgICAgICAgICAgICAgICAicHJvdG9jb2xvcHRpb25zIjogewogICAgICAgICAgICAgICAgICAgICAgICAidG9waWNfbmFtZSI6ICJ3YXRlcmJvaWxlci97Ym9pbGVySWR9L3RlbXBlcmF0dXJlIiwKICAgICAgICAgICAgICAgICAgICAgICAgInFvcyI6IDEsCiAgICAgICAgICAgICAgICAgICAgICAgICJyZXRhaW4iOiBmYWxzZQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImRhdGFzY2hlbWFmb3JtYXQiOiAiSlNPTlNjaGVtYS9EcmFmdC0wNyIsCiAgICAgICAgICAgICAgICAgICAgImRhdGFzY2hlbWF1cmkiOiAiL3NjaGVtYWdyb3Vwcy9XYXRlckJvaWxlci9zY2hlbWFzL1dhdGVyQm9pbGVyLlRlbXBlcmF0dXJlVXBkYXRlRXZlbnREYXRhIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJXYXRlckJvaWxlci5TdGF0dXNDaGFuZ2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkV2ZW50IGZvciB3YXRlciBib2lsZXIgc3RhdHVzIGNoYW5nZSIsCiAgICAgICAgICAgICAgICAgICAgInByb3RvY29sIjogIk1RVFQvNS4wIiwKICAgICAgICAgICAgICAgICAgICAicHJvdG9jb2xvcHRpb25zIjogewogICAgICAgICAgICAgICAgICAgICAgICAidG9waWNfbmFtZSI6ICJ3YXRlcmJvaWxlci97Ym9pbGVySWR9L3N0YXR1cyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJxb3MiOiAxLAogICAgICAgICAgICAgICAgICAgICAgICAicmV0YWluIjogZmFsc2UKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJkYXRhc2NoZW1hZm9ybWF0IjogIkpTT05TY2hlbWEvRHJhZnQtMDciLAogICAgICAgICAgICAgICAgICAgICJkYXRhc2NoZW1hdXJpIjogIi9zY2hlbWFncm91cHMvV2F0ZXJCb2lsZXIvc2NoZW1hcy9XYXRlckJvaWxlci5TdGF0dXNDaGFuZ2VFdmVudERhdGEiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9LAogICAgInNjaGVtYWdyb3VwcyI6IHsKICAgICAgICAiV2F0ZXJCb2lsZXIiOiB7CiAgICAgICAgICAgICJzY2hlbWFzIjogewogICAgICAgICAgICAgICAgIldhdGVyQm9pbGVyLlRlbXBlcmF0dXJlVXBkYXRlRXZlbnREYXRhIjogewogICAgICAgICAgICAgICAgICAgICJmb3JtYXQiOiAiSlNPTlNjaGVtYS9EcmFmdC0wNyIsCiAgICAgICAgICAgICAgICAgICAgInZlcnNpb25zIjogewogICAgICAgICAgICAgICAgICAgICAgICAiMSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJmb3JtYXQiOiAiSlNPTlNjaGVtYS9EcmFmdC0wNyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAic2NoZW1hIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIlRlbXBlcmF0dXJlVXBkYXRlRXZlbnREYXRhIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiRGF0YSBzY2hlbWEgZm9yIHdhdGVyIGJvaWxlciB0ZW1wZXJhdHVyZSB1cGRhdGUgZXZlbnQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJib2lsZXJJZCI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiSWRlbnRpZmllciBvZiB0aGUgd2F0ZXIgYm9pbGVyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGVtcGVyYXR1cmUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJudW1iZXIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkN1cnJlbnQgdGVtcGVyYXR1cmUgcmVhZGluZyBpbiBDZWxzaXVzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGltZXN0YW1wIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiRXZlbnQgdGltZXN0YW1wIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJib2lsZXJJZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZW1wZXJhdHVyZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0aW1lc3RhbXAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJXYXRlckJvaWxlci5TdGF0dXNDaGFuZ2VFdmVudERhdGEiOiB7CiAgICAgICAgICAgICAgICAgICAgImZvcm1hdCI6ICJKU09OU2NoZW1hL0RyYWZ0LTA3IiwKICAgICAgICAgICAgICAgICAgICAidmVyc2lvbnMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICIxIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgImZvcm1hdCI6ICJKU09OU2NoZW1hL0RyYWZ0LTA3IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzY2hlbWEiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiRzY2hlbWEiOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiU3RhdHVzQ2hhbmdlRXZlbnREYXRhIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiRGF0YSBzY2hlbWEgZm9yIHdhdGVyIGJvaWxlciBzdGF0dXMgY2hhbmdlIGV2ZW50IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYm9pbGVySWQiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIklkZW50aWZpZXIgb2YgdGhlIHdhdGVyIGJvaWxlciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInN0YXR1cyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiTmV3IHN0YXR1cyBvZiB0aGUgd2F0ZXIgYm9pbGVyIChlLmcuLCBvbi9vZmYpIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGltZXN0YW1wIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiRXZlbnQgdGltZXN0YW1wIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJib2lsZXJJZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzdGF0dXMiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGltZXN0YW1wIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQo="
            }
          },
          "versionscount": 1
        },
        "windgenerator-kafka-avro.xreg.json": {
          "sampleid": "windgenerator-kafka-avro.xreg.json",
          "self": "#/xregistryspecs/cloudevents-v1/samples/windgenerator-kafka-avro.xreg.json",
          "xid": "/xregistryspecs/cloudevents-v1/samples/windgenerator-kafka-avro.xreg.json",
          "metaurl": "#/xregistryspecs/cloudevents-v1/samples/windgenerator-kafka-avro.xreg.json/meta",
          "meta": {
            "sampleid": "windgenerator-kafka-avro.xreg.json",
            "self": "#/xregistryspecs/cloudevents-v1/samples/windgenerator-kafka-avro.xreg.json/meta",
            "xid": "/xregistryspecs/cloudevents-v1/samples/windgenerator-kafka-avro.xreg.json/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:33.719114276Z",
            "modifiedat": "2025-08-20T15:03:33.719114276Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/cloudevents-v1/samples/windgenerator-kafka-avro.xreg.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/cloudevents-v1/samples/windgenerator-kafka-avro.xreg.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "windgenerator-kafka-avro.xreg.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/cloudevents-v1/samples/windgenerator-kafka-avro.xreg.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/cloudevents-v1/samples/windgenerator-kafka-avro.xreg.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:33.719114276Z",
              "modifiedat": "2025-08-20T15:03:33.719114276Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": "ewogICJtZXNzYWdlZ3JvdXBzIjogewogICAgIldpbmRHZW5lcmF0b3IuRXZlbnRzIjogewogICAgICAiZGVzY3JpcHRpb24iOiAiRXZlbnRzIGZvciB3aW5kIGdlbmVyYXRvciBvcGVyYXRpb25zIiwKICAgICAgInByb3RvY29sIjogIktBRktBIiwKICAgICAgIm1lc3NhZ2VzIjogewogICAgICAgICJXaW5kR2VuZXJhdG9yLlBvd2VyT3V0cHV0VXBkYXRlIjogewogICAgICAgICAgImRlc2NyaXB0aW9uIjogIkV2ZW50IGZvciB3aW5kIGdlbmVyYXRvciBwb3dlciBvdXRwdXQgdXBkYXRlIiwKICAgICAgICAgICJwcm90b2NvbCI6ICJLQUZLQSIsCiAgICAgICAgICAicHJvdG9jb2xvcHRpb25zIjogewogICAgICAgICAgICAiaGVhZGVycyI6IHsKICAgICAgICAgICAgICAiYWN0aW9uIjogewogICAgICAgICAgICAgICAgIm5hbWUiOiAiYWN0aW9uIiwKICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJwb3dlck91dHB1dCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJrZXkiOiAie2dlbmVyYXRvcklkfSIKICAgICAgICAgIH0sCiAgICAgICAgICAiZGF0YXNjaGVtYWZvcm1hdCI6ICJBdnJvLzEuMTEiLAogICAgICAgICAgImRhdGFzY2hlbWF1cmkiOiAiL3NjaGVtYWdyb3Vwcy9XaW5kR2VuZXJhdG9yL3NjaGVtYXMvV2luZEdlbmVyYXRvci5Qb3dlck91dHB1dFVwZGF0ZUV2ZW50RGF0YSIKICAgICAgICB9LAogICAgICAgICJXaW5kR2VuZXJhdG9yLlN0YXR1c0NoYW5nZSI6IHsKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJFdmVudCBmb3Igd2luZCBnZW5lcmF0b3Igc3RhdHVzIGNoYW5nZSIsCiAgICAgICAgICAicHJvdG9jb2wiOiAiS0FGS0EiLAogICAgICAgICAgInByb3RvY29sb3B0aW9ucyI6IHsKICAgICAgICAgICAgImhlYWRlcnMiOiB7CiAgICAgICAgICAgICAgImFjdGlvbiI6IHsKICAgICAgICAgICAgICAgICJuYW1lIjogImFjdGlvbiIsCiAgICAgICAgICAgICAgICAidmFsdWUiOiAic3RhdHVzQ2hhbmdlIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImtleSI6ICJ7Z2VuZXJhdG9ySWR9IgogICAgICAgICAgfSwKICAgICAgICAgICJkYXRhc2NoZW1hZm9ybWF0IjogIkF2cm8vMS4xMSIsCiAgICAgICAgICAiZGF0YXNjaGVtYXVyaSI6ICIvc2NoZW1hZ3JvdXBzL1dpbmRHZW5lcmF0b3Ivc2NoZW1hcy9XaW5kR2VuZXJhdG9yLlN0YXR1c0NoYW5nZUV2ZW50RGF0YSIKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LAogICJzY2hlbWFncm91cHMiOiB7CiAgICAiV2luZEdlbmVyYXRvciI6IHsKICAgICAgInNjaGVtYXMiOiB7CiAgICAgICAgIldpbmRHZW5lcmF0b3IuUG93ZXJPdXRwdXRVcGRhdGVFdmVudERhdGEiOiB7CiAgICAgICAgICAiZm9ybWF0IjogIkF2cm8vMS4xMSIsCiAgICAgICAgICAidmVyc2lvbnMiOiB7CiAgICAgICAgICAgICIxIjogewogICAgICAgICAgICAgICJmb3JtYXQiOiAiQXZyby8xLjExIiwKICAgICAgICAgICAgICAic2NoZW1hIjogewogICAgICAgICAgICAgICAgInR5cGUiOiAicmVjb3JkIiwKICAgICAgICAgICAgICAgICJuYW1lIjogIlBvd2VyT3V0cHV0VXBkYXRlRXZlbnREYXRhIiwKICAgICAgICAgICAgICAgICJkb2MiOiAiRGF0YSBzY2hlbWEgZm9yIHdpbmQgZ2VuZXJhdG9yIHBvd2VyIG91dHB1dCB1cGRhdGUgZXZlbnQiLAogICAgICAgICAgICAgICAgImZpZWxkcyI6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJuYW1lIjogImdlbmVyYXRvcklkIiwKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICJkb2MiOiAiSWRlbnRpZmllciBvZiB0aGUgd2luZCBnZW5lcmF0b3IiCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJwb3dlck91dHB1dCIsCiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiZG91YmxlIiwKICAgICAgICAgICAgICAgICAgICAiZG9jIjogIkN1cnJlbnQgcG93ZXIgb3V0cHV0IGluIGtpbG93YXR0cyIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJuYW1lIjogInRpbWVzdGFtcCIsCiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAibG9uZyIsCiAgICAgICAgICAgICAgICAgICAgImRvYyI6ICJFdmVudCB0aW1lc3RhbXAiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJXaW5kR2VuZXJhdG9yLlN0YXR1c0NoYW5nZUV2ZW50RGF0YSI6IHsKICAgICAgICAgICJmb3JtYXQiOiAiQXZyby8xLjExIiwKICAgICAgICAgICJ2ZXJzaW9ucyI6IHsKICAgICAgICAgICAgIjEiOiB7CiAgICAgICAgICAgICAgImZvcm1hdCI6ICJBdnJvLzEuMTEiLAogICAgICAgICAgICAgICJzY2hlbWEiOiB7CiAgICAgICAgICAgICAgICAidHlwZSI6ICJyZWNvcmQiLAogICAgICAgICAgICAgICAgIm5hbWUiOiAiU3RhdHVzQ2hhbmdlRXZlbnREYXRhIiwKICAgICAgICAgICAgICAgICJkb2MiOiAiRGF0YSBzY2hlbWEgZm9yIHdpbmQgZ2VuZXJhdG9yIHN0YXR1cyBjaGFuZ2UgZXZlbnQiLAogICAgICAgICAgICAgICAgImZpZWxkcyI6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJuYW1lIjogImdlbmVyYXRvcklkIiwKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICJkb2MiOiAiSWRlbnRpZmllciBvZiB0aGUgd2luZCBnZW5lcmF0b3IiCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJzdGF0dXMiLAogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgImRvYyI6ICJOZXcgc3RhdHVzIG9mIHRoZSB3aW5kIGdlbmVyYXRvciIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJuYW1lIjogInRpbWVzdGFtcCIsCiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAibG9uZyIsCiAgICAgICAgICAgICAgICAgICAgImRvYyI6ICJFdmVudCB0aW1lc3RhbXAiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9Cn0K"
            }
          },
          "versionscount": 1
        }
      },
      "samplescount": 9,
      "schemasurl": "#/xregistryspecs/cloudevents-v1/schemas",
      "schemas": {
        "document-schema.avsc": {
          "schemaid": "document-schema.avsc",
          "self": "#/xregistryspecs/cloudevents-v1/schemas/document-schema.avsc",
          "xid": "/xregistryspecs/cloudevents-v1/schemas/document-schema.avsc",
          "metaurl": "#/xregistryspecs/cloudevents-v1/schemas/document-schema.avsc/meta",
          "meta": {
            "schemaid": "document-schema.avsc",
            "self": "#/xregistryspecs/cloudevents-v1/schemas/document-schema.avsc/meta",
            "xid": "/xregistryspecs/cloudevents-v1/schemas/document-schema.avsc/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:33.113114674Z",
            "modifiedat": "2025-08-20T15:03:33.113114674Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/cloudevents-v1/schemas/document-schema.avsc/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/cloudevents-v1/schemas/document-schema.avsc/versions",
          "versions": {
            "v1.0-rc1": {
              "schemaid": "document-schema.avsc",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/cloudevents-v1/schemas/document-schema.avsc/versions/v1.0-rc1",
              "xid": "/xregistryspecs/cloudevents-v1/schemas/document-schema.avsc/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:33.113114674Z",
              "modifiedat": "2025-08-20T15:03:33.113114674Z",
              "ancestor": "v1.0-rc1",
              "schemabase64": ""
            }
          },
          "versionscount": 1
        },
        "document-schema.json": {
          "schemaid": "document-schema.json",
          "self": "#/xregistryspecs/cloudevents-v1/schemas/document-schema.json",
          "xid": "/xregistryspecs/cloudevents-v1/schemas/document-schema.json",
          "metaurl": "#/xregistryspecs/cloudevents-v1/schemas/document-schema.json/meta",
          "meta": {
            "schemaid": "document-schema.json",
            "self": "#/xregistryspecs/cloudevents-v1/schemas/document-schema.json/meta",
            "xid": "/xregistryspecs/cloudevents-v1/schemas/document-schema.json/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:33.171693232Z",
            "modifiedat": "2025-08-20T15:03:33.171693232Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/cloudevents-v1/schemas/document-schema.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/cloudevents-v1/schemas/document-schema.json/versions",
          "versions": {
            "v1.0-rc1": {
              "schemaid": "document-schema.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/cloudevents-v1/schemas/document-schema.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/cloudevents-v1/schemas/document-schema.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:33.171693232Z",
              "modifiedat": "2025-08-20T15:03:33.171693232Z",
              "ancestor": "v1.0-rc1",
              "schemabase64": ""
            }
          },
          "versionscount": 1
        },
        "openapi.json": {
          "schemaid": "openapi.json",
          "self": "#/xregistryspecs/cloudevents-v1/schemas/openapi.json",
          "xid": "/xregistryspecs/cloudevents-v1/schemas/openapi.json",
          "metaurl": "#/xregistryspecs/cloudevents-v1/schemas/openapi.json/meta",
          "meta": {
            "schemaid": "openapi.json",
            "self": "#/xregistryspecs/cloudevents-v1/schemas/openapi.json/meta",
            "xid": "/xregistryspecs/cloudevents-v1/schemas/openapi.json/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:33.24096929Z",
            "modifiedat": "2025-08-20T15:03:33.24096929Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/cloudevents-v1/schemas/openapi.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/cloudevents-v1/schemas/openapi.json/versions",
          "versions": {
            "v1.0-rc1": {
              "schemaid": "openapi.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/cloudevents-v1/schemas/openapi.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/cloudevents-v1/schemas/openapi.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:33.24096929Z",
              "modifiedat": "2025-08-20T15:03:33.24096929Z",
              "ancestor": "v1.0-rc1",
              "schemabase64": ""
            }
          },
          "versionscount": 1
        }
      },
      "schemascount": 3
    },
    "core-v1": {
      "xregistryspecid": "core-v1",
      "self": "#/xregistryspecs/core-v1",
      "xid": "/xregistryspecs/core-v1",
      "epoch": 12,
      "createdat": "2025-08-20T15:03:33.856977286Z",
      "modifiedat": "2025-08-20T15:03:34.533675407Z",
      "docsurl": "#/xregistryspecs/core-v1/docs",
      "docs": {
        "model.json": {
          "docid": "model.json",
          "self": "#/xregistryspecs/core-v1/docs/model.json",
          "xid": "/xregistryspecs/core-v1/docs/model.json",
          "metaurl": "#/xregistryspecs/core-v1/docs/model.json/meta",
          "meta": {
            "docid": "model.json",
            "self": "#/xregistryspecs/core-v1/docs/model.json/meta",
            "xid": "/xregistryspecs/core-v1/docs/model.json/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:33.856977286Z",
            "modifiedat": "2025-08-20T15:03:33.856977286Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/core-v1/docs/model.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/core-v1/docs/model.json/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "model.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/core-v1/docs/model.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/core-v1/docs/model.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:33.856977286Z",
              "modifiedat": "2025-08-20T15:03:33.856977286Z",
              "ancestor": "v1.0-rc1",
              "docbase64": "ewogICIkc2NoZW1hIjogImh0dHBzOi8veHJlZ2lzdHJ5LmlvL3hyZWdpc3RyeXNwZWNzL2NvcmUtdjEvc2NoZW1hcy9tb2RlbC5zY2hlbWEuanNvbiIsCiAgImF0dHJpYnV0ZXMiOiB7CiAgICAic3BlY3ZlcnNpb24iOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJyZWFkb25seSI6IHRydWUsCiAgICAgICJyZXF1aXJlZCI6IHRydWUsCiAgICAgICJkZWZhdWx0IjogIjEuMC1yYzIiCiAgICB9LAogICAgInJlZ2lzdHJ5aWQiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJpbW11dGFibGUiOiB0cnVlLAogICAgICAicmVhZG9ubHkiOiB0cnVlLAogICAgICAicmVxdWlyZWQiOiB0cnVlCiAgICB9LAogICAgInNlbGYiOiB7CiAgICAgICJ0eXBlIjogInVybCIsCiAgICAgICJpbW11dGFibGUiOiB0cnVlLAogICAgICAicmVhZG9ubHkiOiB0cnVlLAogICAgICAicmVxdWlyZWQiOiB0cnVlCiAgICB9LAogICAgInNob3J0c2VsZiI6IHsKICAgICAgInR5cGUiOiAidXJsIiwKICAgICAgImltbXV0YWJsZSI6IHRydWUsCiAgICAgICJyZWFkb25seSI6IHRydWUKICAgIH0sCiAgICAieGlkIjogewogICAgICAidHlwZSI6ICJ4aWQiLAogICAgICAicmVhZG9ubHkiOiB0cnVlLAogICAgICAiaW1tdXRhYmxlIjogdHJ1ZSwKICAgICAgInJlcXVpcmVkIjogdHJ1ZQogICAgfSwKICAgICJlcG9jaCI6IHsKICAgICAgInR5cGUiOiAidWludGVnZXIiLAogICAgICAicmVhZG9ubHkiOiB0cnVlLAogICAgICAicmVxdWlyZWQiOiB0cnVlCiAgICB9LAogICAgIm5hbWUiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIKICAgIH0sCiAgICAiZG9jdW1lbnRhdGlvbiI6IHsKICAgICAgInR5cGUiOiAidXJsIgogICAgfSwKICAgICJpY29uIjogewogICAgICAidHlwZSI6ICJ1cmwiCiAgICB9LAogICAgImxhYmVscyI6IHsKICAgICAgInR5cGUiOiAibWFwIiwKICAgICAgIml0ZW0iOiB7CiAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICB9CiAgICB9LAogICAgImNyZWF0ZWRhdCI6IHsKICAgICAgInR5cGUiOiAidGltZXN0YW1wIiwKICAgICAgInJlcXVpcmVkIjogdHJ1ZQogICAgfSwKICAgICJtb2RpZmllZGF0IjogewogICAgICAidHlwZSI6ICJ0aW1lc3RhbXAiLAogICAgICAicmVxdWlyZWQiOiB0cnVlCiAgICB9LAoKICAgICJjYXBhYmlsaXRpZXMiOiB7CiAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICJhdHRyaWJ1dGVzIjogewogICAgICAgICIqIjogewogICAgICAgICAgInR5cGUiOiAiYW55IgogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgICJtb2RlbCI6IHsKICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgInJlYWRvbmx5IjogdHJ1ZSwKICAgICAgImF0dHJpYnV0ZXMiOiB7CiAgICAgICAgIioiOiB7CiAgICAgICAgICAidHlwZSI6ICJhbnkiCiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgIm1vZGVsc291cmNlIjogewogICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAiYXR0cmlidXRlcyI6IHsKICAgICAgICAiKiI6IHsKICAgICAgICAgICJ0eXBlIjogImFueSIKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9Cn0K"
            }
          },
          "versionscount": 1
        },
        "primer.md": {
          "docid": "primer.md",
          "self": "#/xregistryspecs/core-v1/docs/primer.md",
          "xid": "/xregistryspecs/core-v1/docs/primer.md",
          "metaurl": "#/xregistryspecs/core-v1/docs/primer.md/meta",
          "meta": {
            "docid": "primer.md",
            "self": "#/xregistryspecs/core-v1/docs/primer.md/meta",
            "xid": "/xregistryspecs/core-v1/docs/primer.md/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:33.918689465Z",
            "modifiedat": "2025-08-20T15:03:33.918689465Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/core-v1/docs/primer.md/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/core-v1/docs/primer.md/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "primer.md",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/core-v1/docs/primer.md/versions/v1.0-rc1",
              "xid": "/xregistryspecs/core-v1/docs/primer.md/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:33.918689465Z",
              "modifiedat": "2025-08-20T15:03:33.918689465Z",
              "ancestor": "v1.0-rc1",
              "docbase64": ""
            }
          },
          "versionscount": 1
        },
        "sample-model.json": {
          "docid": "sample-model.json",
          "self": "#/xregistryspecs/core-v1/docs/sample-model.json",
          "xid": "/xregistryspecs/core-v1/docs/sample-model.json",
          "metaurl": "#/xregistryspecs/core-v1/docs/sample-model.json/meta",
          "meta": {
            "docid": "sample-model.json",
            "self": "#/xregistryspecs/core-v1/docs/sample-model.json/meta",
            "xid": "/xregistryspecs/core-v1/docs/sample-model.json/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:33.979192395Z",
            "modifiedat": "2025-08-20T15:03:33.979192395Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/core-v1/docs/sample-model.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/core-v1/docs/sample-model.json/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "sample-model.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/core-v1/docs/sample-model.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/core-v1/docs/sample-model.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:33.979192395Z",
              "modifiedat": "2025-08-20T15:03:33.979192395Z",
              "ancestor": "v1.0-rc1",
              "docbase64": "ewogICJncm91cHMiOiB7CiAgICAiZGlycyI6IHsKICAgICAgInNpbmd1bGFyIjogImRpciIsCiAgICAgICJyZXNvdXJjZXMiOiB7CiAgICAgICAgImZpbGVzIjogewogICAgICAgICAgInNpbmd1bGFyIjogImZpbGUiCiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQp9Cg=="
            }
          },
          "versionscount": 1
        },
        "spec.md": {
          "docid": "spec.md",
          "self": "#/xregistryspecs/core-v1/docs/spec.md",
          "xid": "/xregistryspecs/core-v1/docs/spec.md",
          "metaurl": "#/xregistryspecs/core-v1/docs/spec.md/meta",
          "meta": {
            "docid": "spec.md",
            "self": "#/xregistryspecs/core-v1/docs/spec.md/meta",
            "xid": "/xregistryspecs/core-v1/docs/spec.md/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:34.228456283Z",
            "modifiedat": "2025-08-20T15:03:34.228456283Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/core-v1/docs/spec.md/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/core-v1/docs/spec.md/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "spec.md",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/core-v1/docs/spec.md/versions/v1.0-rc1",
              "xid": "/xregistryspecs/core-v1/docs/spec.md/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:34.228456283Z",
              "modifiedat": "2025-08-20T15:03:34.228456283Z",
              "ancestor": "v1.0-rc1",
              "docbase64": ""
            }
          },
          "versionscount": 1
        },
        "xregbasicmodel.png": {
          "docid": "xregbasicmodel.png",
          "self": "#/xregistryspecs/core-v1/docs/xregbasicmodel.png",
          "xid": "/xregistryspecs/core-v1/docs/xregbasicmodel.png",
          "metaurl": "#/xregistryspecs/core-v1/docs/xregbasicmodel.png/meta",
          "meta": {
            "docid": "xregbasicmodel.png",
            "self": "#/xregistryspecs/core-v1/docs/xregbasicmodel.png/meta",
            "xid": "/xregistryspecs/core-v1/docs/xregbasicmodel.png/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:34.038764094Z",
            "modifiedat": "2025-08-20T15:03:34.038764094Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/core-v1/docs/xregbasicmodel.png/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/core-v1/docs/xregbasicmodel.png/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "xregbasicmodel.png",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/core-v1/docs/xregbasicmodel.png/versions/v1.0-rc1",
              "xid": "/xregistryspecs/core-v1/docs/xregbasicmodel.png/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:34.038764094Z",
              "modifiedat": "2025-08-20T15:03:34.038764094Z",
              "ancestor": "v1.0-rc1",
              "docbase64": ""
            }
          },
          "versionscount": 1
        },
        "xregfullmodel.png": {
          "docid": "xregfullmodel.png",
          "self": "#/xregistryspecs/core-v1/docs/xregfullmodel.png",
          "xid": "/xregistryspecs/core-v1/docs/xregfullmodel.png",
          "metaurl": "#/xregistryspecs/core-v1/docs/xregfullmodel.png/meta",
          "meta": {
            "docid": "xregfullmodel.png",
            "self": "#/xregistryspecs/core-v1/docs/xregfullmodel.png/meta",
            "xid": "/xregistryspecs/core-v1/docs/xregfullmodel.png/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:34.097504813Z",
            "modifiedat": "2025-08-20T15:03:34.097504813Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/core-v1/docs/xregfullmodel.png/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/core-v1/docs/xregfullmodel.png/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "xregfullmodel.png",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/core-v1/docs/xregfullmodel.png/versions/v1.0-rc1",
              "xid": "/xregistryspecs/core-v1/docs/xregfullmodel.png/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:34.097504813Z",
              "modifiedat": "2025-08-20T15:03:34.097504813Z",
              "ancestor": "v1.0-rc1",
              "docbase64": ""
            }
          },
          "versionscount": 1
        },
        "xregsample.png": {
          "docid": "xregsample.png",
          "self": "#/xregistryspecs/core-v1/docs/xregsample.png",
          "xid": "/xregistryspecs/core-v1/docs/xregsample.png",
          "metaurl": "#/xregistryspecs/core-v1/docs/xregsample.png/meta",
          "meta": {
            "docid": "xregsample.png",
            "self": "#/xregistryspecs/core-v1/docs/xregsample.png/meta",
            "xid": "/xregistryspecs/core-v1/docs/xregsample.png/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:34.163495674Z",
            "modifiedat": "2025-08-20T15:03:34.163495674Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/core-v1/docs/xregsample.png/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/core-v1/docs/xregsample.png/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "xregsample.png",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/core-v1/docs/xregsample.png/versions/v1.0-rc1",
              "xid": "/xregistryspecs/core-v1/docs/xregsample.png/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:34.163495674Z",
              "modifiedat": "2025-08-20T15:03:34.163495674Z",
              "ancestor": "v1.0-rc1",
              "docbase64": ""
            }
          },
          "versionscount": 1
        }
      },
      "docscount": 7,
      "samplesurl": "#/xregistryspecs/core-v1/samples",
      "samples": {
        "contoso-crm.cereg": {
          "sampleid": "contoso-crm.cereg",
          "self": "#/xregistryspecs/core-v1/samples/contoso-crm.cereg",
          "xid": "/xregistryspecs/core-v1/samples/contoso-crm.cereg",
          "metaurl": "#/xregistryspecs/core-v1/samples/contoso-crm.cereg/meta",
          "meta": {
            "sampleid": "contoso-crm.cereg",
            "self": "#/xregistryspecs/core-v1/samples/contoso-crm.cereg/meta",
            "xid": "/xregistryspecs/core-v1/samples/contoso-crm.cereg/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:34.533675407Z",
            "modifiedat": "2025-08-20T15:03:34.533675407Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/core-v1/samples/contoso-crm.cereg/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/core-v1/samples/contoso-crm.cereg/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "contoso-crm.cereg",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/core-v1/samples/contoso-crm.cereg/versions/v1.0-rc1",
              "xid": "/xregistryspecs/core-v1/samples/contoso-crm.cereg/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:34.533675407Z",
              "modifiedat": "2025-08-20T15:03:34.533675407Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": ""
            }
          },
          "versionscount": 1
        },
        "doc-store-data.json": {
          "sampleid": "doc-store-data.json",
          "self": "#/xregistryspecs/core-v1/samples/doc-store-data.json",
          "xid": "/xregistryspecs/core-v1/samples/doc-store-data.json",
          "metaurl": "#/xregistryspecs/core-v1/samples/doc-store-data.json/meta",
          "meta": {
            "sampleid": "doc-store-data.json",
            "self": "#/xregistryspecs/core-v1/samples/doc-store-data.json/meta",
            "xid": "/xregistryspecs/core-v1/samples/doc-store-data.json/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:34.30432941Z",
            "modifiedat": "2025-08-20T15:03:34.30432941Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/core-v1/samples/doc-store-data.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/core-v1/samples/doc-store-data.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "doc-store-data.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/core-v1/samples/doc-store-data.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/core-v1/samples/doc-store-data.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:34.30432941Z",
              "modifiedat": "2025-08-20T15:03:34.30432941Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": "ewogICJuYW1lIjogIkRvY3VtZW50IFN0b3JlIFNhbXBsZSIsCiAgImRpcnMiOiB7CiAgICAiZm9ybXMiOiB7CiAgICAgICJmaWxlcyI6IHsKICAgICAgICAiMTA0MCI6IHsKICAgICAgICAgICJ2ZXJzaW9uaWQiOiAidjAiLAogICAgICAgICAgImNvbnRlbnR0eXBlIjogInRleHQvcGxhaW4iLAogICAgICAgICAgImZpbGUiOiAiVGhpcyBpcyBmb3JtIDEwNDAiCiAgICAgICAgfSwKICAgICAgICAiMTA5MCI6IHsKICAgICAgICAgICJ2ZXJzaW9ucyI6IHsKICAgICAgICAgICAgInYxIjogewogICAgICAgICAgICAgICJjb250ZW50dHlwZSI6ICJ0ZXh0L3BsYWluIiwKICAgICAgICAgICAgICAiZmlsZSI6ICJUaGlzIGlzIGZvcm0gMTA5MCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInYyIjogewogICAgICAgICAgICAgICAiY29udGVudHR5cGUiOiAidGV4dC9wbGFpbiIsCiAgICAgICAgICAgICAgImZpbGUiOiAiVGhpcyBpcyBmb3JtIDEwOTAgLSBzZWUgbWUgc2hpbmUhIgogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgInByb3Bvc2FscyI6IHsKICAgICAgImZpbGVzIjogewogICAgICAgICJuZXctaG9tZS1Kb25lcyI6IHsKICAgICAgICAgICJjb250ZW50dHlwZSI6ICJ0ZXh0L3BsYWluIiwKICAgICAgICAgICJmaWxlYmFzZTY0IjogIlNHOXRaU0J3YkdGdWN5Qm1iM0lnZEdobElFcHZibVZ6SndvPSIKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9Cn0K"
            }
          },
          "versionscount": 1
        },
        "doc-store-model.json": {
          "sampleid": "doc-store-model.json",
          "self": "#/xregistryspecs/core-v1/samples/doc-store-model.json",
          "xid": "/xregistryspecs/core-v1/samples/doc-store-model.json",
          "metaurl": "#/xregistryspecs/core-v1/samples/doc-store-model.json/meta",
          "meta": {
            "sampleid": "doc-store-model.json",
            "self": "#/xregistryspecs/core-v1/samples/doc-store-model.json/meta",
            "xid": "/xregistryspecs/core-v1/samples/doc-store-model.json/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:34.361620502Z",
            "modifiedat": "2025-08-20T15:03:34.361620502Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/core-v1/samples/doc-store-model.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/core-v1/samples/doc-store-model.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "doc-store-model.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/core-v1/samples/doc-store-model.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/core-v1/samples/doc-store-model.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:34.361620502Z",
              "modifiedat": "2025-08-20T15:03:34.361620502Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": "ewogICJncm91cHMiOiB7CiAgICAiZGlycyI6IHsKICAgICAgInNpbmd1bGFyIjogImRpciIsCgogICAgICAicmVzb3VyY2VzIjogewogICAgICAgICJmaWxlcyI6IHsKICAgICAgICAgICJzaW5ndWxhciI6ICJmaWxlIgogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KfQo="
            }
          },
          "versionscount": 1
        },
        "formatted-doc-store-data.json": {
          "sampleid": "formatted-doc-store-data.json",
          "self": "#/xregistryspecs/core-v1/samples/formatted-doc-store-data.json",
          "xid": "/xregistryspecs/core-v1/samples/formatted-doc-store-data.json",
          "metaurl": "#/xregistryspecs/core-v1/samples/formatted-doc-store-data.json/meta",
          "meta": {
            "sampleid": "formatted-doc-store-data.json",
            "self": "#/xregistryspecs/core-v1/samples/formatted-doc-store-data.json/meta",
            "xid": "/xregistryspecs/core-v1/samples/formatted-doc-store-data.json/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:34.41682629Z",
            "modifiedat": "2025-08-20T15:03:34.41682629Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/core-v1/samples/formatted-doc-store-data.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/core-v1/samples/formatted-doc-store-data.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "formatted-doc-store-data.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/core-v1/samples/formatted-doc-store-data.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/core-v1/samples/formatted-doc-store-data.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:34.41682629Z",
              "modifiedat": "2025-08-20T15:03:34.41682629Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": "ewogICJuYW1lIjogIkRvY3VtZW50IFN0b3JlIFNhbXBsZSIsCiAgImRvY3MiOiB7CiAgICAibmV3Q29udHJhY3QiOiB7CiAgICAgICJmb3JtYXRzIjogewogICAgICAgICJwZGYiOiB7CiAgICAgICAgICAiY29udGVudHR5cGUiOiAiYXBwbGljYXRpb24vcGRmIiwKICAgICAgICAgICJmb3JtYXQiOiAiVGhpcyBpcyBmb3JtIDEwNDAgaW4gcGRmIC0gbm90IHJlYWxseSBwZGYgdGhvdWdoIgogICAgICAgIH0sCiAgICAgICAgIm1zLXdvcmQiOiB7CiAgICAgICAgICAidmVyc2lvbnMiOiB7CiAgICAgICAgICAgICJ2MSI6IHsKICAgICAgICAgICAgICAiY29udGVudHR5cGUiOiAiYXBwbGljYXRpb24vbXMtd29yZCIsCiAgICAgICAgICAgICAgImZvcm1hdGJhc2U2NCI6ICJZVzRnYjJ4a0lHMXpMWGR2Y21RZ1pHOWpDZz09IgogICAgICAgICAgICB9LAogICAgICAgICAgICAidjIiOiB7CiAgICAgICAgICAgICAgImNvbnRlbnR0eXBlIjogImFwcGxpY2F0aW9uL21zLXdvcmQiLAogICAgICAgICAgICAgICJmb3JtYXRiYXNlNjQiOiAiYzI5dFpTQnRjeTEzYjNKa0lHUnZZd289IgogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgImFtZW5kQ29udHJhY3QiOiB7CiAgICAgICJmb3JtYXRzIjogewogICAgICAgICJ0ZXh0IjogewogICAgICAgICAgICAiY29udGVudHR5cGUiOiAidGV4dC9wbGFpbiIsCiAgICAgICAgICAgICJmb3JtYXQiOiAiUGxlYXNlIGFtZW5kIEpvZSdzIGNvbnRyYWN0IHN1Y2ggdGhhdC4uLiIKICAgICAgICB9LAogICAgICAgICJodG1sIjogewogICAgICAgICAgICAiY29udGVudHR5cGUiOiAidGV4dC9odG1sIiwKICAgICAgICAgICAgImZvcm1hdCI6ICI8aHRtbD48Ym9keT5QbGVhc2UgYW1lbmQgSm9lJ3MgY29udHJhY3Qgc3VjaCB0aGF0Li4uPC9ib2R5PjwvaHRtbD4iCiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQp9Cg=="
            }
          },
          "versionscount": 1
        },
        "formatted-doc-store-model.json": {
          "sampleid": "formatted-doc-store-model.json",
          "self": "#/xregistryspecs/core-v1/samples/formatted-doc-store-model.json",
          "xid": "/xregistryspecs/core-v1/samples/formatted-doc-store-model.json",
          "metaurl": "#/xregistryspecs/core-v1/samples/formatted-doc-store-model.json/meta",
          "meta": {
            "sampleid": "formatted-doc-store-model.json",
            "self": "#/xregistryspecs/core-v1/samples/formatted-doc-store-model.json/meta",
            "xid": "/xregistryspecs/core-v1/samples/formatted-doc-store-model.json/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:34.474847577Z",
            "modifiedat": "2025-08-20T15:03:34.474847577Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/core-v1/samples/formatted-doc-store-model.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/core-v1/samples/formatted-doc-store-model.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "formatted-doc-store-model.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/core-v1/samples/formatted-doc-store-model.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/core-v1/samples/formatted-doc-store-model.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:34.474847577Z",
              "modifiedat": "2025-08-20T15:03:34.474847577Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": "ewogICJncm91cHMiOiB7CiAgICAiZG9jcyI6IHsKICAgICAgInNpbmd1bGFyIjogImRvYyIsCgogICAgICAicmVzb3VyY2VzIjogewogICAgICAgICJmb3JtYXRzIjogewogICAgICAgICAgInNpbmd1bGFyIjogImZvcm1hdCIKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9Cn0K"
            }
          },
          "versionscount": 1
        }
      },
      "samplescount": 5,
      "schemasurl": "#/xregistryspecs/core-v1/schemas",
      "schemas": {},
      "schemascount": 0
    },
    "endpoint-v1": {
      "xregistryspecid": "endpoint-v1",
      "self": "#/xregistryspecs/endpoint-v1",
      "xid": "/xregistryspecs/endpoint-v1",
      "epoch": 5,
      "createdat": "2025-08-20T15:03:34.597177432Z",
      "modifiedat": "2025-08-20T15:03:34.8397819Z",
      "docsurl": "#/xregistryspecs/endpoint-v1/docs",
      "docs": {
        "model.json": {
          "docid": "model.json",
          "self": "#/xregistryspecs/endpoint-v1/docs/model.json",
          "xid": "/xregistryspecs/endpoint-v1/docs/model.json",
          "metaurl": "#/xregistryspecs/endpoint-v1/docs/model.json/meta",
          "meta": {
            "docid": "model.json",
            "self": "#/xregistryspecs/endpoint-v1/docs/model.json/meta",
            "xid": "/xregistryspecs/endpoint-v1/docs/model.json/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:34.597177432Z",
            "modifiedat": "2025-08-20T15:03:34.597177432Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/endpoint-v1/docs/model.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/endpoint-v1/docs/model.json/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "model.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/endpoint-v1/docs/model.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/endpoint-v1/docs/model.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:34.597177432Z",
              "modifiedat": "2025-08-20T15:03:34.597177432Z",
              "ancestor": "v1.0-rc1",
              "docbase64": ""
            }
          },
          "versionscount": 1
        },
        "spec.md": {
          "docid": "spec.md",
          "self": "#/xregistryspecs/endpoint-v1/docs/spec.md",
          "xid": "/xregistryspecs/endpoint-v1/docs/spec.md",
          "metaurl": "#/xregistryspecs/endpoint-v1/docs/spec.md/meta",
          "meta": {
            "docid": "spec.md",
            "self": "#/xregistryspecs/endpoint-v1/docs/spec.md/meta",
            "xid": "/xregistryspecs/endpoint-v1/docs/spec.md/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:34.66235256Z",
            "modifiedat": "2025-08-20T15:03:34.66235256Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/endpoint-v1/docs/spec.md/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/endpoint-v1/docs/spec.md/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "spec.md",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/endpoint-v1/docs/spec.md/versions/v1.0-rc1",
              "xid": "/xregistryspecs/endpoint-v1/docs/spec.md/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:34.66235256Z",
              "modifiedat": "2025-08-20T15:03:34.66235256Z",
              "ancestor": "v1.0-rc1",
              "docbase64": "IyBFbmRwb2ludCBSZWdpc3RyeSBTZXJ2aWNlIC0gVmVyc2lvbiAxLjAtcmMyCgojIyBBYnN0cmFjdAoKVGhpcyBzcGVjaWZpY2F0aW9uIGRlZmluZXMgYW4gZW5kcG9pbnQgcmVnaXN0cnkgZXh0ZW5zaW9uIHRvIHRoZSB4UmVnaXN0cnkKZG9jdW1lbnQgZm9ybWF0IGFuZCBBUEkgW3NwZWNpZmljYXRpb25dKC4uL2NvcmUvc3BlYy5tZCkuCgoKIyMgVGFibGUgb2YgQ29udGVudHMKCi0gW092ZXJ2aWV3XSgjb3ZlcnZpZXcpCi0gW05vdGF0aW9ucyBhbmQgVGVybWlub2xvZ3ldKCNub3RhdGlvbnMtYW5kLXRlcm1pbm9sb2d5KQogIC0gW05vdGF0aW9uYWwgQ29udmVudGlvbnNdKCNub3RhdGlvbmFsLWNvbnZlbnRpb25zKQogIC0gW1Rlcm1pbm9sb2d5XSgjdGVybWlub2xvZ3kpCi0gW0VuZHBvaW50IFJlZ2lzdHJ5XSgjZW5kcG9pbnQtcmVnaXN0cnktbW9kZWwpCiAgLSBbRW5kcG9pbnRzXSgjZW5kcG9pbnRzLWdyb3VwcykKCiMjIE92ZXJ2aWV3CgpUaGlzIHNwZWNpZmljYXRpb24gZGVmaW5lcyBhIHJlZ2lzdHJ5IG9mIG1ldGFkYXRhIGRlZmluaXRpb25zIGZvciBhYnN0cmFjdCBhbmQKY29uY3JldGUgbmV0d29yayBlbmRwb2ludHMgdG8gd2hpY2ggbWVzc2FnZXMgY2FuIGJlIHByb2R1Y2VkLCBmcm9tIHdoaWNoCm1lc3NhZ2VzIGNhbiBiZSBjb25zdW1lZCwgb3Igd2hpY2ggbWFrZSBtZXNzYWdlcyBhdmFpbGFibGUgZm9yIHN1YnNjcmlwdGlvbnMuCgpGb3IgZWFzeSByZWZlcmVuY2UsIHRoZSBKU09OIHNlcmlhbGl6YXRpb24gb2YgYW4gRW5kcG9pbnQgUmVnaXN0cnkgYWRoZXJlcyB0bwp0aGlzIGZvcm06CgpgYGB5YW1sCnsKICAic3BlY3ZlcnNpb24iOiAiPFNUUklORz4iLAogICJyZWdpc3RyeWlkIjogIjxTVFJJTkc+IiwKICAic2VsZiI6ICI8VVJMPiIsCiAgInhpZCI6ICI8WElEPiIsCiAgImVwb2NoIjogPFVJTlRFR0VSPiwKICAibmFtZSI6ICI8U1RSSU5HPiIsID8KICAiZGVzY3JpcHRpb24iOiAiPFNUUklORz4iLCA/CiAgImRvY3VtZW50YXRpb24iOiAiPFVSTD4iLCA/CiAgImxhYmVscyI6IHsKICAgICI8U1RSSU5HPiI6ICI8U1RSSU5HPiIgKgogIH0sID8KICAiY3JlYXRlZGF0IjogIjxUSU1FU1RBTVA+IiwKICAibW9kaWZpZWRhdCI6ICI8VElNRVNUQU1QPiIsCgogICJtb2RlbCI6IHsgLi4uIH0sID8KCiAgImVuZHBvaW50c3VybCI6ICI8VVJMPiIsCiAgImVuZHBvaW50c2NvdW50IjogPFVJTlRFR0VSPiwKICAiZW5kcG9pbnRzIjogewogICAgIjxLRVk+IjogewogICAgICAiZW5kcG9pbnRpZCI6ICI8U1RSSU5HPiIsICAgICAgICAgICAgICAgICAgICMgeFJlZ2lzdHJ5IGNvcmUgYXR0cmlidXRlcwogICAgICAic2VsZiI6ICI8VVJMPiIsCiAgICAgICJ4aWQiOiAiPFhJRD4iLAogICAgICAiZXBvY2giOiA8VUlOVEVHRVI+LAogICAgICAibmFtZSI6ICI8U1RSSU5HPiIsID8KICAgICAgImRlc2NyaXB0aW9uIjogIjxTVFJJTkc+IiwgPwogICAgICAiZG9jdW1lbnRhdGlvbiI6ICI8VVJMPiIsID8KICAgICAgImxhYmVscyI6IHsgIjxTVFJJTkc+IjogIjxTVFJJTkc+IiAqIH0sID8KICAgICAgImNyZWF0ZWRhdCI6ICI8VElNRVNUQU1QPiIsCiAgICAgICJtb2RpZmllZGF0IjogIjxUSU1FU1RBTVA+IiwKICAgICAgImRlcHJlY2F0ZWQiOiB7IC4uLiB9LCA/CgogICAgICAidXNhZ2UiOiBbICI8U1RSSU5HPiIgKyBdICwgICAgICAgICAgICAgICAgICMgc3Vic2NyaWJlciwgY29uc3VtZXIsIHByb2R1Y2VyCiAgICAgICJjaGFubmVsIjogIjxTVFJJTkc+IiwgPwoKICAgICAgIyBTdGFydCBvZiBFbmRwb2ludCBleHRlbnNpb24gYXR0cmlidXRlcwogICAgICAiZW52ZWxvcGUiOiAiPFNUUklORz4iLCA/ICAgICAgICAgICAgICAgICAgICMgZS5nLiBDbG91ZEV2ZW50cy8xLjAKICAgICAgImVudmVsb3Blb3B0aW9ucyI6IHsKICAgICAgICAiPFNUUklORz4iOiA8SlNPTi1WQUxVRT4gKgoKICAgICAgICAjIENsb3VkRXZlbnRzLzEuMCBvcHRpb25zCiAgICAgICAgIm1vZGUiOiAiPFNUUklORz4iLCA/ICAgICAgICAgICAgICAgICAgICAgIyBiaW5hcnksIHN0cnVjdHVyZWQKICAgICAgICAiZm9ybWF0IjogIjxTVFJJTkc+IiA/ICAgICAgICAgICAgICAgICAgICAjIGUuZy4gYXBwbGljYXRpb24vanNvbgogICAgICB9LAoKICAgICAgInByb3RvY29sIjogIjxTVFJJTkc+IiwgPyAgICAgICAgICAgICAgICAgICAjIGUuZy4gSFRUUC8xLjEKICAgICAgInByb3RvY29sb3B0aW9ucyI6IHsKICAgICAgICAiPFNUUklORz4iOiA8SlNPTi1WQUxVRT4gKgoKICAgICAgICAjIENvbW1vbiBwcm90b2NvbCBvcHRpb25zCiAgICAgICAgImVuZHBvaW50cyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInVybCI6ICI8VVJMPiIgICAgICAgICAgICAgICAgICAgICAgICAjIHBsdXMgZW5kcG9pbnQgZXh0ZW5zaW9ucwogICAgICAgICAgfSAqCiAgICAgICAgXSwgPwogICAgICAgICJhdXRob3JpemF0aW9uIjogewogICAgICAgICAgInR5cGUiOiAiPFNUUklORz4iLCA/CiAgICAgICAgICAicmVzb3VyY2V1cmkiOiAiVVJJIiwgPwogICAgICAgICAgImF1dGhvcml0eXVyaSI6ICJVUkkiLCA/CiAgICAgICAgICAiZ3JhbnRfdHlwZXMiOiBbICI8U1RSSU5HPiIgKiBdID8KICAgICAgICB9LCA/CiAgICAgICAgImRlcGxveWVkIjogPEJPT0xFQU4+LCA/CgogICAgICAgICMgIkhUVFAiIHByb3RvY29sIG9wdGlvbnMKICAgICAgICAibWV0aG9kIjogIjxTVFJJTkc+IiwgPyAgICAgICAgICAgICAgICAgICAgICAgICAgIyBEZWZhdWx0OiBQT1NUCiAgICAgICAgImhlYWRlcnMiOiBbIHsgIm5hbWUiOiAiPFNUUklORz4iLCAidmFsdWUiOiAiPFNUUklORz4iIH0gKiBdLCA/CiAgICAgICAgInF1ZXJ5IjogeyAiPFNUUklORz4iOiAiPFNUUklORz4iICogfSA/CgogICAgICAgICMgIkFNUVAvMS4wIiBwcm90b2NvbCBvcHRpb25zCiAgICAgICAgIm5vZGUiOiAiPFNUUklORz4iLCA/CiAgICAgICAgImR1cmFibGUiOiA8Qk9PTEVBTj4sID8gICAgICAgICAgICAgICAgICAgICAgICAgICMgRGVmYXVsdDogZmFsc2UKICAgICAgICAibGlua3Byb3BlcnRpZXMiOiB7ICI8U1RSSU5HPiI6ICI8U1RSSU5HPiIgKiB9LCA/CiAgICAgICAgImNvbm5lY3Rpb25wcm9wZXJ0aWVzIjogeyAiPFNUUklORz4iOiAiPFNUUklORz4iICogfSwgPwogICAgICAgICJkaXN0cmlidXRpb25tb2RlIjogIm1vdmUiIHwgImNvcHkiID8gICAgICAgICAgIyBEZWZhdWx0OiBtb3ZlCgogICAgICAgICMgIk1RVFQvMy4xLjEiIHByb3RvY29sIG9wdGlvbnMKICAgICAgICAidG9waWMiOiAiPFNUUklORz4iLCA/CiAgICAgICAgInFvcyI6IDxVSU5URUdFUj4sID8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgRGVmYXVsdDogMAogICAgICAgICJyZXRhaW4iOiA8Qk9PTEVBTj4sID8gICAgICAgICAgICAgICAgICAgICAgICAgICAjIERlZmF1bHQ6IGZhbHNlCiAgICAgICAgImNsZWFuc2Vzc2lvbiI6IDxCT09MRUFOPiwgPyAgICAgICAgICAgICAgICAgICAgICMgRGVmYXVsdDogdHJ1ZQogICAgICAgICJ3aWxsdG9waWMiOiAiPFNUUklORz4iLCA/CiAgICAgICAgIndpbGxtZXNzYWdlIjogIjxYSUQ+IiA/CgogICAgICAgICMgIk1RVFQvNS4wIiBwcm90b2NvbCBvcHRpb25zCiAgICAgICAgInRvcGljIjogIjxTVFJJTkc+IiwgPwogICAgICAgICJxb3MiOiA8VUlOVEVHRVI+LCA/ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIERlZmF1bHQ6IDAKICAgICAgICAicmV0YWluIjogPEJPT0xFQU4+LCA/ICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBEZWZhdWx0OiBmYWxzZQogICAgICAgICJjbGVhbnNlc3Npb24iOiA8Qk9PTEVBTj4sID8gICAgICAgICAgICAgICAgICAgICAjIERlZmF1bHQ6IHRydWUKICAgICAgICAid2lsbHRvcGljIjogIjxTVFJJTkc+IiwgPwogICAgICAgICJ3aWxsbWVzc2FnZSI6ICI8WElEPiIgPwoKICAgICAgICAjICJLQUZLQSIgcHJvdG9jb2wgb3B0aW9ucwogICAgICAgICJ0b3BpYyI6ICI8U1RSSU5HPiIsID8KICAgICAgICAiYWNrcyI6IDxJTlRFR0VSPiwgPyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBEZWZhdWx0OiAxCiAgICAgICAgImtleSI6ICI8U1RSSU5HPiIsID8KICAgICAgICAicGFydGl0aW9uIjogPElOVEVHRVI+LCA/CiAgICAgICAgImNvbnN1bWVyZ3JvdXAiOiAiPFNUUklORz4iLCA/CiAgICAgICAgImhlYWRlcnMiOiB7ICI8U1RSSU5HPiI6ICI8U1RSSU5HPiIgKiB9ID8KCiAgICAgICAgIyAiTkFUUyIgcHJvdG9jb2wgb3B0aW9ucwogICAgICAgICJzdWJqZWN0IjogIjxTVFJJTkc+IiA/CiAgICAgIH0sID8KCiAgICAgICJtZXNzYWdlZ3JvdXBzIjogWyBYSUQgKiBdLCA/CiAgICAgICMgRW5kIG9mIEVuZHBvaW50IGV4dGVuc2lvbnMKCiAgICAgICJtZXNzYWdlc3VybCI6ICI8VVJMPiIsID8KICAgICAgIm1lc3NhZ2VzY291bnQiOiA8VUlOVEVHRVI+LCA/CiAgICAgICJtZXNzYWdlcyI6IHsKICAgICAgICAiPEtFWT4iOiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIG1lc3NhZ2VpZAogICAgICAgICAgIyBTZWUgTWVzc2FnZSBEZWZpbml0aW9uIHNwZWMgZm9yIGRldGFpbHMKICAgICAgICB9ICoKICAgICAgfSA/CiAgICB9ICoKICB9ID8KfQpgYGAKCiMjIE5vdGF0aW9ucyBhbmQgVGVybWlub2xvZ3kKCiMjIyBOb3RhdGlvbmFsIENvbnZlbnRpb25zCgpUaGUga2V5IHdvcmRzICJNVVNUIiwgIk1VU1QgTk9UIiwgIlJFUVVJUkVEIiwgIlNIQUxMIiwgIlNIQUxMIE5PVCIsICJTSE9VTEQiLAoiU0hPVUxEIE5PVCIsICJSRUNPTU1FTkRFRCIsICJNQVkiLCBhbmQgIk9QVElPTkFMIiBpbiB0aGlzIGRvY3VtZW50IGFyZSB0byBiZQppbnRlcnByZXRlZCBhcyBkZXNjcmliZWQgaW4gW1JGQyAyMTE5XShodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMjExOSkuCgpGb3IgY2xhcml0eSwgT1BUSU9OQUwgYXR0cmlidXRlcyAoc3BlY2lmaWNhdGlvbi1kZWZpbmVkIGFuZCBleHRlbnNpb25zKSBhcmUKT1BUSU9OQUwgZm9yIGNsaWVudHMgdG8gdXNlLCBidXQgdGhlIHNlcnZlcnMnIHJlc3BvbnNpYmlsaXR5IHdpbGwgdmFyeS4KU2VydmVyLXVua25vd24gZXh0ZW5zaW9uIGF0dHJpYnV0ZXMgTVVTVCBiZSBzaWxlbnRseSBzdG9yZWQgaW4gdGhlIGJhY2tpbmcKZGF0YXN0b3JlLiBTcGVjaWZpY2F0aW9uLWRlZmluZWQsIGFuZCBzZXJ2ZXIta25vd24gZXh0ZW5zaW9uLCBhdHRyaWJ1dGVzIE1VU1QKZ2VuZXJhdGUgYW4gZXJyb3IgaWYgY29ycmVzcG9uZGluZyBmZWF0dXJlIGlzIG5vdCBzdXBwb3J0ZWQgb3IgZW5hYmxlZC4KSG93ZXZlciwgYXMgd2l0aCBhbGwgYXR0cmlidXRlcywgaWYgYWNjZXB0aW5nIHRoZSBhdHRyaWJ1dGUgd291bGQgcmVzdWx0IGluIGEKYmFkIHN0YXRlIChzdWNoIGFzIGV4Y2VlZGluZyBhIHNpemUgbGltaXQsIG9yIHJlc3VsdHMgaW4gYSBzZWN1cml0eSBpc3N1ZSksCnRoZW4gdGhlIHNlcnZlciBNQVkgY2hvb3NlIHRvIHJlamVjdCB0aGUgcmVxdWVzdC4KCkluIHRoZSBwc2V1ZG8gSlNPTiBmb3JtYXQgc25pcHBldHMgYD9gIG1lYW5zIHRoZSBwcmVjZWRpbmcgYXR0cmlidXRlIGlzCk9QVElPTkFMLCBgKmAgbWVhbnMgdGhlIHByZWNlZGluZyBhdHRyaWJ1dGUgTUFZIGFwcGVhciB6ZXJvIG9yIG1vcmUgdGltZXMsCmFuZCBgK2AgbWVhbnMgdGhlIHByZWNlZGluZyBhdHRyaWJ1dGUgTVVTVCBhcHBlYXIgYXQgbGVhc3Qgb25jZS4gVGhlIHByZXNlbmNlCm9mIHRoZSBgI2AgY2hhcmFjdGVyIG1lYW5zIHRoZSByZW1haW5pbmcgcG9ydGlvbiBvZiB0aGUgbGluZSBpcyBhIGNvbW1lbnQuCldoaXRlc3BhY2UgY2hhcmFjdGVycyBpbiB0aGUgSlNPTiBzbmlwcGV0cyBhcmUgdXNlZCBmb3IgcmVhZGFiaWxpdHkgYW5kIGFyZQpub3Qgbm9ybWF0aXZlLgoKIyMjIFRlcm1pbm9sb2d5CgpUaGlzIHNwZWNpZmljYXRpb24gZGVmaW5lcyB0aGUgZm9sbG93aW5nIHRlcm1zOgoKIyMjIEVuZHBvaW50CgpBbiAiZW5kcG9pbnQiIGlzIGEgbG9naWNhbCBvciBwaHlzaWNhbCBuZXR3b3JrIGxvY2F0aW9uIHRvIHdoaWNoIG1lc3NhZ2VzIGNhbgpiZSBwcm9kdWNlZCwgZnJvbSB3aGljaCBtZXNzYWdlcyBjYW4gYmUgY29uc3VtZWQsIG9yIHdoaWNoIG1ha2VzIG1lc3NhZ2VzCmF2YWlsYWJsZSB2aWEgc3Vic2NyaXB0aW9uIGZvciBkZWxpdmVyeSB0byBhIGNvbnN1bWVyLWRlc2lnbmF0ZWQgZW5kcG9pbnQuCgojIyBFbmRwb2ludCBSZWdpc3RyeSBNb2RlbAoKVGhlIEVuZHBvaW50IFJlZ2lzdHJ5IGlzIGEgcmVnaXN0cnkgb2YgbWV0YWRhdGEgZGVmaW5pdGlvbnMgZm9yIGFic3RyYWN0IGFuZApjb25jcmV0ZSBuZXR3b3JrIGVuZHBvaW50cyB0byB3aGljaCBtZXNzYWdlcyBjYW4gYmUgcHJvZHVjZWQsIGZyb20gd2hpY2gKbWVzc2FnZXMgY2FuIGJlIGNvbnN1bWVkLCBvciB3aGljaCBtYWtlcyBtZXNzYWdlcyBhdmFpbGFibGUgdmlhIHN1YnNjcmlwdGlvbgphbmQgZGVsaXZlcnkgdG8gYSBjb25zdW1lci1kZXNpZ25hdGVkIGVuZHBvaW50LgoKQXMgZGlzY3Vzc2VkIGluIHRoZSBbQ2xvdWRFdmVudHMgUmVnaXN0cnkgb3ZlcnZpZXddKC4uL2Nsb3VkZXZlbnRzL3NwZWMubWQpLAplbmRwb2ludHMgYXJlIHN1cGVyc2V0cyBvZgpbbWVzc2FnZSBkZWZpbml0aW9uIGdyb3Vwc10oLi4vbWVzc2FnZS9zcGVjLm1kI21lc3NhZ2UtZGVmaW5pdGlvbi1ncm91cHMpIGFuZApNQVkgY29udGFpbiBpbmxpbmVkIG1lc3NhZ2VzLiBUaGVyZWZvcmUsIHRoZSBSZXNvdXJjZXMgaW4gdGhlIG1ldGEtbW9kZWwgZm9yCnRoZSBFbmRwb2ludCBSZWdpc3RyeSBhcmUgbGlrZXdpc2UgYG1lc3NhZ2VzYCBhcyBkZWZpbmVkIGluIHRoZQpbbWVzc2FnZSBjYXRhbG9nIHNwZWNpZmljYXRpb25dKC4uL21lc3NhZ2Uvc3BlYy5tZCkuCgpUaGUgZm9ybWFsIHhSZWdpc3RyeSBleHRlbnNpb24gbW9kZWwgb2YgdGhlIEVuZHBvaW50cyBSZWdpc3RyeQpyZXNpZGVzIGluIHRoZSBbbW9kZWwuanNvbl0obW9kZWwuanNvbikgZmlsZS4KCiMjIyBFbmRwb2ludHMgR3JvdXBzCgpUaGUgR3JvdXAgcGx1cmFsIG5hbWUgKGA8R1JPVVBTPmApIGlzIGBlbmRwb2ludHNgLCBhbmQgdGhlIEdyb3VwIHNpbmd1bGFyCm5hbWUgKGA8R1JPVVA+YCkgaXMgYGVuZHBvaW50YC4KClRoZSBmb2xsb3dpbmcgYXR0cmlidXRlcyBhcmUgZGVmaW5lZCBmb3IgdGhlIGBlbmRwb2ludGAgb2JqZWN0IGluIGFkZGl0aW9uCnRvIHRoZSB4UmVnaXN0cnktZGVmaW5lZCBjb3JlClthdHRyaWJ1dGVzXSguLi9jb3JlL3NwZWMubWQjYXR0cmlidXRlcy1hbmQtZXh0ZW5zaW9ucyk6CgojIyMjIGB1c2FnZWAKCi0gVHlwZTogQXJyYXkgb2YgU3RyaW5nIChFbnVtOiBgc3Vic2NyaWJlcmAsIGBjb25zdW1lcmAsIGBwcm9kdWNlcmApCi0gRGVzY3JpcHRpb246IFRoZSBgdXNhZ2VgIGF0dHJpYnV0ZSBpcyBhIHNldCBvZiBzdHJpbmdzIHRoYXQgaW5kaWNhdGVzIHRoZQogIGludGVuZGVkIHVzYWdlIG9mIHRoZSBlbmRwb2ludCBieSBjb21tdW5pY2F0aW5nIHBhcnRpZXMuIEluIG90aGVyIHdvcmRzLCB0aGUKICByb2xlcyBhIGNsaWVudCBjYW4gYWN0IGluIHdoZW4gdGFsa2luZyB3aXRoIHRoZSBlbmRwb2ludC4KCiAgRWFjaCBvZiB0aGVzZSBwYXJ0aWVzIHdpbGwgaGF2ZSBhIGRpZmZlcmVudCBwZXJzcGVjdGl2ZSBvbiBhbiBlbmRwb2ludC4gRm9yCiAgaW5zdGFuY2UsIGEgYHByb2R1Y2VyYCBlbmRwb2ludCBpcyBzZWVuIGFzIGEgInRhcmdldCIgYnkgdGhlIG9yaWdpbmF0b3Igb2YKICBtZXNzYWdlcywgYW5kIGFzIGEgInNvdXJjZSIgYnkgdGhlIHBhcnR5IHRoYXQgYWNjZXB0cyB0aGUgbWVzc2FnZXMuIFRoZQogIG5vbWVuY2xhdHVyZSB1c2VkIGZvciB0aGUgYHVzYWdlYCBmaWVsZCBpcyBwcmltYXJpbHkgb3JpZW50ZWQgYXJvdW5kIHRoZQogIGNvbW1vbiBzY2VuYXJpbyBvZiBuZXR3b3JrIGVuZHBvaW50cyBiZWluZyBwcm92aWRlZCBieSBzb21lIHNvcnQgb2YKICBpbnRlcm1lZGlhcnkgbGlrZSBhIG1lc3NhZ2UgYnJva2VyLiBUaGUgdGVybSBgcHJvZHVjZXJgIHByaW1hcmlseSBkZXNjcmliZXMKICB0aGUgcmVsYXRpb25zaGlwIG9mIGEgY2xpZW50IHdpdGggdGhhdCBpbnRlcm1lZGlhcnkuCgogIEluIGEgZGlyZWN0LWRlbGl2ZXJ5IHNjZW5hcmlvIHdoZXJlIHRoZSBvcmlnaW5hdG9yIG9mIG1lc3NhZ2VzIGNvbm5lY3RzCiAgZGlyZWN0bHkgdG8gdGhlIHRhcmdldCAoZS5nLiBhICJXZWJIb29rIiBjYWxsKSwgdGhlIHRhcmdldCBlbmRwb2ludAogIGltcGxlbWVudHMgdGhlIGFjY2VwdGluZyBlbmQgb2YgdGhlIGBwcm9kdWNlcmAgcmVsYXRpb25zaGlwLgoKICBTb21lIG9mIHRoZXNlIHBlcnNwZWN0aXZlcyBhcmUgbWVudGlvbmVkIGJlbG93IGZvciBpbGx1c3RyYXRpb24sIGJ1dCBub3QKICBmb3JtYWxseSBkZWZpbmVkIG9yIHJlZmxlY3RlZCBpbiB0aGUgbWV0YWRhdGEgbW9kZWwuIFBlcnNwZWN0aXZlcyBkZXBlbmQgb24KICB0aGUgY29udGV4dCBpbiB3aGljaCB0aGUgZW5kcG9pbnQgbWV0YWRhdGEgaXMgdXNlZCBhbmQgdGhpcyBtZXRhZGF0YSBtb2RlbCBpcwogIGludGVudGlvbmFsbHkgbGVhdmluZyBwZXJzcGVjdGl2ZXMgb3BlbiB0byB1c2Vycy4KCiAgVGhlIGZvbGxvd2luZyB2YWx1ZXMgYXJlIGRlZmluZWQgZm9yIGB1c2FnZWAKCiAgLSBgc3Vic2NyaWJlcmA6IFRoZSBlbmRwb2ludCBvZmZlcnMgbWFuYWdpbmcgc3Vic2NyaXB0aW9ucyBmb3IgZGVsaXZlcnkgb2YKICAgIG1lc3NhZ2VzIHRvIGFub3RoZXIgZW5kcG9pbnQsIHVzaW5nIHRoZSBbQ2xvdWRFdmVudHMgU3Vic2NyaXB0aW9ucwogICAgQVBJXVtDbG91ZEV2ZW50cyBTdWJzY3JpcHRpb25zIEFQSV0uCgogICAgU29tZSBwZXJzcGVjdGl2ZXMgdGhhdCBtaWdodCBleGlzdCBvbiBhIHN1YnNjcmliZXIgZW5kcG9pbnQ6CiAgICAtIEFwcGxpY2F0aW9uIGZyb20gd2hpY2ggbWVzc2FnZXMgb3JpZ2luYXRlLgogICAgLSBBcHBsaWNhdGlvbiB3aGljaCBhY2NlcHRzIG1lc3NhZ2VzIGZyb20gdGhlIGRlbGl2ZXJ5IGFnZW50LgogICAgLSBBcHBsaWNhdGlvbiB3aGljaCBtYW5hZ2VzIHN1YnNjcmlwdGlvbnMgZm9yIGRlbGl2ZXJ5IG9mIG1lc3NhZ2VzIHRvIHRoZQogICAgICB0YXJnZXQgYXBwbGljYXRpb24uIFRoaXMgbWlnaHQgYmUgYSBtZXNzYWdlIGJyb2tlciBzdWJzY3JpcHRpb24gbWFuYWdlci4KCiAgLSBgY29uc3VtZXJgOiBUaGUgZW5kcG9pbnQgb2ZmZXJzIG1lc3NhZ2VzIGJlaW5nIGNvbnN1bWVkIChwdWxsZWQpIGZyb20gaXQuCgogICAgU29tZSBwZXJzcGVjdGl2ZXMgdGhhdCBtaWdodCBleGlzdCBvbiBhIGNvbnN1bWVyIGVuZHBvaW50OgogICAgLSBNZXNzYWdlIHN0b3JlIG9yIHNvdXJjZSB3aGljaCBtYWtlcyBtZXNzYWdlcyBhdmFpbGFibGUgZm9yIGNvbnN1bXB0aW9uOwogICAgICB0aGlzIG1pZ2h0IGJlIGEgbWVzc2FnZSBicm9rZXIgdG9waWMgb3IgYSBxdWV1ZS4KICAgIC0gUHJveHkgb3Igb3RoZXIgaW50ZXJtZWRpYXJ5IHdoaWNoIHNvbGljaXRzIG1lc3NhZ2VzIGZyb20gdGhlIHNvdXJjZSBhbmQKICAgICAgZm9yd2FyZHMgdGhlbSB0byB0aGUgdGFyZ2V0IGVuZHBvaW50LgogICAgLSBBcHBsaWNhdGlvbiB3aGljaCBjb25zdW1lcyBtZXNzYWdlcy4KCiAgLSBgcHJvZHVjZXJgOiBUaGUgZW5kcG9pbnQgb2ZmZXJzIG1lc3NhZ2VzIGJlaW5nIHByb2R1Y2VkIChwdXNoZWQpIHRvIGl0LgoKICAgIFNvbWUgcGVyc3BlY3RpdmVzIG1pZ2h0IGV4aXN0IG9uIGEgcHJvZHVjZXIgZW5kcG9pbnQ6CiAgICAtIEFwcGxpY2F0aW9uIGZyb20gd2hpY2ggbWVzc2FnZXMgb3JpZ2luYXRlLgogICAgLSBSZXZlcnNlIHByb3h5IG9yIG90aGVyIGludGVybWVkaWFyeSB3aGljaCBhY2NlcHRzIG1lc3NhZ2VzIGZyb20gdGhlCiAgICAgIG9yaWdpbmF0b3IgYW5kIGZvcndhcmRzIHRoZW0gdG8gdGhlIHRhcmdldCBlbmRwb2ludC4KICAgIC0gQXBwbGljYXRpb24gd2hpY2ggYWNjZXB0cyBtZXNzYWdlcy4gVGhpcyBtaWdodCBiZSBhIG1lc3NhZ2UgYnJva2VyIHRvcGljCiAgICAgIG9yIGEgcXVldWUuIFRoaXMgbWlnaHQgYmUgYW4gSFRUUCBlbmRwb2ludCB0aGF0IGRpcmVjdGx5IGFjY2VwdHMgYW5kCiAgICAgIGhhbmRsZXMgbWVzc2FnZXMuCgogIEFueSBlbmRwb2ludCBjYW4gYmUgc2VlbiBmcm9tIGRpZmZlcmVudCByb2xlIHBlcnNwZWN0aXZlczoKCiAgVGhlcmUgbWlnaHQgYWxzbyBiZSBmdXJ0aGVyIHBlcnNwZWN0aXZlcyBzdWNoIGFzIHBpcGVsaW5lIHN0YWdlcyBmb3IKICBwcmUtL3Bvc3QtcHJvY2Vzc2luZywgZXRjLgoKLSBDb25zdHJhaW50czoKICAtIFJFUVVJUkVELgogIC0gTVVTVCBjb250YWluIG9ubHkgdGhlIGZvbGxvd2luZyBwb3NzaWJsZSB2YWx1ZXM6CiAgICAtICJzdWJzY3JpYmVyIgogICAgLSAiY29uc3VtZXIiCiAgICAtICJwcm9kdWNlciIKICAtIE1VU1QgYmUgYW4gYXJyYXkgb2YgYXQgbGVhc3Qgb25lLgoKIyMjIyBgY2hhbm5lbGAKCi0gVHlwZTogU3RyaW5nCi0gRGVzY3JpcHRpb246IEEgc3RyaW5nIHRoYXQgY2FuIGJlIHVzZWQgdG8gY29ycmVsYXRlIEVuZHBvaW50cy4gQW55IEVuZHBvaW50cwogIHdpdGhpbiBhbiBpbnN0YW5jZSBvZiBhbiBFbmRwb2ludCBSZWdpc3RyeSB0aGF0IHNoYXJlIHRoZSBzYW1lIG5vbi1lbXB0eQogIGBjaGFubmVsYCB2YWx1ZSBNVVNUIGhhdmUgc29tZSByZWxhdGlvbnNoaXAuIFRoaXMgc3BlY2lmaWNhdGlvbiBkb2VzIG5vdAogIGRlZmluZSB0aGF0IHJlbGF0aW9uc2hpcCBvciB0aGUgc3BlY2lmaWMgdmFsdWVzIHVzZWQgaW4gdGhpcyBwcm9wZXJ0eS4KICBIb3dldmVyLCBpdCBpcyBleHBlY3RlZCB0aGF0IHRoZSBgdXNhZ2VgIHZhbHVlIGluIGNvbWJpbmF0aW9uIHdpdGggdGhpcwogIGBjaGFubmVsYCBwcm9wZXJ0eSB3aWxsIHByb3ZpZGUgc29tZSBpbmZvcm1hdGlvbiB0byBoZWxwIGRldGVybWluZSB0aGUKICByZWxhdGlvbnNoaXAuCgogIEZvciBpbnN0YW5jZSwgYSBtZXNzYWdlIGJyb2tlciBxdWV1ZSAicXVldWUxIiBtaWdodCBiZSByZXByZXNlbnRlZCB3aXRoIGEKICBgcHJvZHVjZXJgIGVuZHBvaW50IGFuZCBhIGBjb25zdW1lcmAgZW5kcG9pbnQsIGJvdGggd2l0aCB0aGUgc2FtZSBgY2hhbm5lbGAKICBhdHRyaWJ1dGUgdmFsdWUgb2YgInF1ZXVlMSIuCgogIEFuIGV2ZW50IHByb2Nlc3NpbmcgcGlwZWxpbmUgbWlnaHQgaGF2ZSBhIHNlcXVlbmNlIG9mIHN0YWdlcywgZWFjaCB3aXRoIGEKICBgcHJvZHVjZXJgIGVuZHBvaW50IGFuZCBhIGBjb25zdW1lcmAgZW5kcG9pbnQsIGFsbCB3aXRoIHRoZSBzYW1lIGBjaGFubmVsYAogIGF0dHJpYnV0ZSB2YWx1ZSBvZiAicGlwZWxpbmUxIiwgb3Igc29tZSBmdXJ0aGVyIHF1YWxpZmljYXRpb24gbGlrZQogICJwaXBlbGluZTEtc3RhZ2UxIiwgZXRjLgoKICBUaGlzIHNwZWNpZmljYXRpb24gZG9lcyBub3QgbWFrZSBhbnkgc3RhdGVtZW50IGFib3V0IHdoZXRoZXIgdHdvIGVuZHBvaW50cwogIHRoYXQgZG8gbm90IHNoYXJlIHRoZSBzYW1lIG5vbi1lbXB0eSB2YWx1ZSBoYXZlIGFueSByZWxhdGlvbnNoaXAgb3Igbm90LgogIFRoZXkgbWlnaHQsIGJ1dCBob3cgdGhpcyBpcyBkZXRlcm1pbmVkIGlzIG91dCBvZiBzY29wZSBvZiB0aGlzIHNwZWNpZmljYXRpb24uCiAgQWRkaXRpb25hbGx5LCB3aGlsZSBpdCBpcyBleHBlY3RlZCB0aGF0IHRoaXMgYXR0cmlidXRlJ3MgdmFsdWUgd2lsbCBiZSBhCiAgc2luZ2xlIHZhbHVlLCBnaXZlbiB0aGlzIHNwZWNpZmljYXRpb24gZG9lcyBub3QgcGxhY2UgYW55IGNvbnN0cmFpbnRzIG9uCiAgaXRzIHN5bnRheCBvciBzZW1hbnRpYyBtZWFuaW5nLCBpbXBsZW1lbnRhdGlvbnMgbWlnaHQgY2hvb3NlIHRvICJlbmNvZGUiCiAgbXVsdGlwbGUgdmFsdWVzIHdpdGhpbiB0aGlzIHNpbmdsZSBzdHJpbmcuIFRoYXQgd291bGQgdGhlbiBpbXBseSB0aGF0IHRoZQogIGNvbXBhcmlzb24gYWxnb3JpdGhtIG9mIHR3byBgY2hhbm5lbGAgdmFsdWVzIG1pZ2h0IG5lZWQgdG8gYmUgbW9yZQogIGNvbXBsaWNhdGVkIHRoYW4gYSAic3RyaW5nIGNvbXBhcmUiIGluIHRob3NlIGNhc2VzLgoKLSBDb25zdHJhaW50czoKICAtIE9QVElPTkFMLgogIC0gV2hlbiBzcGVjaWZpZWQsIHRoZSB2YWx1ZSBNVVNUIGJlIGEgbm9uLWVtcHR5IHN0cmluZy4KLSBFeGFtcGxlczoKICAtIGBxdWV1ZTFgCgojIyMjIGBlbnZlbG9wZWAKCi0gVHlwZTogU3RyaW5nCi0gRGVzY3JpcHRpb246IFRoZSBuYW1lIG9mIHRoZSBzcGVjaWZpY2F0aW9uIHRoYXQgZGVmaW5lcyB0aGUgUmVzb3VyY2UKICBzdG9yZWQgaW4gdGhlIHJlZ2lzdHJ5LiBPZnRlbiBpdCBpcyBkaWZmaWN1bHQgdG8gdW5hbWJpZ3VvdXNseSBkZXRlcm1pbmUKICB3aGF0IGEgUmVzb3VyY2UgaXMgYnkgc2ltcGx5IGluc3BlY3RpbmcgaXRzIHNlcmlhbGl6ZWQgZm9ybS4gVGhpcyBhdHRyaWJ1dGUKICBwcm92aWRlcyBhIG1lY2hhbmlzbSBieSB3aGljaCBpdCBjYW4gYmUgZGV0ZXJtaW5lZCB3aXRob3V0IGV4YW1pbmF0aW9uIG9mCiAgdGhlIFJlc291cmNlIGF0IGFsbC4KLSBDb25zdHJhaW50czoKICAtIE1VU1QgYmUgYSBub24tZW1wdHkgY2FzZS1pbnNlbnNpdGl2ZSBzdHJpbmcgb2YgdGhlIGZvcm0KICAgIGA8U1BFQz5bLzxWRVJTSU9OPl1gLAogICAgd2hlcmUgYDxTUEVDPmAgaXMgdGhlIG5vbi1lbXB0eSBzdHJpbmcgbmFtZSBvZiB0aGUgc3BlY2lmaWNhdGlvbiB0aGF0CiAgICBkZWZpbmVzIHRoZSBSZXNvdXJjZS4gQW4gT1BUSU9OQUwgYDxWRVJTSU9OPmAgdmFsdWUgU0hPVUxEIGJlIGluY2x1ZGVkIGlmCiAgICB0aGVyZSBhcmUgbXVsdGlwbGUgdmVyc2lvbnMgb2YgdGhlIHNwZWNpZmljYXRpb24gYXZhaWxhYmxlLgogIC0gSWYgYSBgPFZFUlNJT04+YCBpcyBzcGVjaWZpZWQgYXQgdGhlIEdyb3VwIGxldmVsLCBhbGwgUmVzb3VyY2VzIHdpdGhpbiB0aGF0CiAgICBHcm91cCBNVVNUIGhhdmUgYSBgPFZFUlNJT04+YCB2YWx1ZSB0aGF0IGlzIGF0IGxlYXN0IGFzIHByZWNpc2UgYXMgaXRzCiAgICBHcm91cCwgYW5kIE1VU1QgTk9UIGV4cGFuZCBpdC4gRm9yIGV4YW1wbGUsIGlmIGEgR3JvdXAgaGFkIGEKICAgIGBlbnZlbG9wZWAgdmFsdWUgb2YgYG15c3BlY2AsIHRoZW4gUmVzb3VyY2VzIHdpdGhpbiB0aGF0IEdyb3VwIGNhbiBoYXZlCiAgICBgZW52ZWxvcGVgIHZhbHVlcyBvZiBgbXlzcGVjYCBvciBgbXlzcGVjLzEuMGAuIEhvd2V2ZXIsIGlmIGEgR3JvdXAgaGFzIGEKICAgIHZhbHVlIG9mIGBteXNwZWMvMS4wYCwgaXQgd291bGQgYmUgaW52YWxpZCBmb3IgYSBSZXNvdXJjZSB0byBoYXZlIGEgdmFsdWUKICAgIG9mIGBteXNwZWMvMi4wYCBvciBqdXN0IGBteXNwZWNgLiBBZGRpdGlvbmFsbHksIGlmIGEgR3JvdXAgZG9lcyBub3QgaGF2ZQogICAgYSBgZW52ZWxvcGVgIGF0dHJpYnV0ZSB0aGVuIHRoZXJlIGFyZSBubyBjb25zdHJhaW50cyBvbiBpdHMgUmVzb3VyY2VzCiAgICBgZW52ZWxvcGVgIGF0dHJpYnV0ZXMuCiAgLSBUaGlzIHNwZWNpZmljYXRpb24gcGxhY2VzIG5vIHJlc3RyaWN0aW9uIG9uIHRoZSBzeW50YXggb2YgdGhlCiAgICBgPFZFUlNJT04+YCB2YWx1ZS4KLSBFeGFtcGxlczoKICAtIGBDbG91ZEV2ZW50cy8xLjBgCgojIyMjIGBlbnZlbG9wZW9wdGlvbnNgCgotIFR5cGU6IE1hcAotIERlc2NyaXB0aW9uOiBDb25maWd1cmF0aW9uIGRldGFpbHMgb2YgdGhlIGVuZHBvaW50IHdpdGggcmVzcGVjdCB0byB0aGUKICBlbnZlbG9wZSBmb3JtYXQgdXNlZCB0byB0cmFuc21pdCB0aGUgbWVzc2FnZXMuCgotIENvbnN0cmFpbnRzOgogIC0gT1BUSU9OQUwuCi0gRXhhbXBsZXM6CiAgLSBGb3IgYW4gZW5kcG9pbnQgdXNpbmcgYW4gYGVudmVsb3BlYCB2YWx1ZSBvZiBgQ2xvdWRFdmVudHMvMS4wYDoKICAgIGB7ICJtb2RlIjogImJpbmFyeSIsICJmb3JtYXQiOiAiYXBwbGljYXRpb24vanNvbiIgfWAKClRoaXMgc3BlY2lmaWNhdGlvbiBkZWZpbmVzIHRoZSBmb2xsb3dpbmcgZW52ZWxvcGUgb3B0aW9ucyBmb3IgdGhlIGluZGljYXRlZApgZW52ZWxvcGVgIHZhbHVlczoKCiMjIyMjIGBDbG91ZEV2ZW50cy8xLjBgCgotIGBtb2RlYCA6IGluZGljYXRlcyB3aGV0aGVyIHRoZSBDbG91ZEV2ZW50IHdpbGwgdXNlIGBiaW5hcnlgIG9yIGBzdHJ1Y3R1cmVkYAogIChtb2RlKVtodHRwczovL2dpdGh1Yi5jb20vY2xvdWRldmVudHMvc3BlYy9ibG9iL21haW4vY2xvdWRldmVudHMvc3BlYy5tZCNtZXNzYWdlXS4KICBXaGVuIHNwZWNpZmllZCwgaXRzIHZhbHVlIE1VU1QgYmUgb25lIG9mOiBgYmluYXJ5YCBvciBgc3RydWN0dXJlZGAsIGNhc2UKICBzZW5zaXRpdmUuIFdoZW4gbm90IHNwZWNpZmllZCwgdGhlIGVuZHBvaW50IGlzIGluZGljYXRpbmcgdGhhdCBlaXRoZXIgbW9kZQogIGlzIGFjY2VwdGFibGUuCi0gYGZvcm1hdGAgOiBpbmRpY2F0ZXMgdGhlIGZvcm1hdCBvZiB0aGUgQ2xvdWRFdmVudCB3aGVuIHNlbnQgaW4gYHN0cnVjdHVyZWRgCiAgbW9kZS4gVGhpcyBhdHRyaWJ1dGUgTVVTVCBOT1QgYmUgc3BlY2lmaWVkIHdoZW4gYG1vZGVgIGlzIGBiaW5hcnlgLiBUaGUgdmFsdWUKICB1c2VkIE1VU1QgbWF0Y2ggdGhlIGV4cGVjdGVkIGNvbnRlbnQgdHlwZSBvZiB0aGUgbWVzc2FnZSAoZS5nLiBmb3IgSFRUUCB0aGUKICBgQ29udGVudC1UeXBlYCBoZWFkZXIgdmFsdWUpLgoKIyMjIyBgcHJvdG9jb2xgCgotIFR5cGU6IFN0cmluZwotIERlc2NyaXB0aW9uOiBUaGUgdHJhbnNwb3J0IG9yIGFwcGxpY2F0aW9uIHByb3RvY29sIHVzZWQgYnkgdGhlIGVuZHBvaW50LiBUaGlzCiAgc3BlY2lmaWNhdGlvbiBkZWZpbmVzIGEgc2V0IG9mIGNvbW1vbiBwcm90b2NvbCBuYW1lcyB0aGF0IE1VU1QgYmUgdXNlZCBmb3IKICByZXNwZWN0aXZlIHByb3RvY29sIGVuZHBvaW50cywgYnV0IGltcGxlbWVudGF0aW9ucyBNQVkgZGVmaW5lIGFuZCB1c2UKICBhZGRpdGlvbmFsIHByb3RvY29sIG5hbWVzLgoKICBBbiBleGFtcGxlIGZvciBhbiBleHRlbnNpb24gcHJvdG9jb2wgaWRlbnRpZmllciBtaWdodCBiZSAiQnVubnlNUS8wLjkuMSIuCgogIFByZWRlZmluZWQgcHJvdG9jb2xzIFNIT1VMRCBiZSByZWZlcnJlZCB0byBieSBuYW1lIGFuZCB2ZXJzaW9uIGFzCiAgYDxOQU1FPi88VkVSU0lPTj5gLiBUaGUgdmVyc2lvbiBudW1iZXIgZm9ybWF0IGlzIGRldGVybWluZWQgYnkgdGhlIHByb3RvY29sCiAgc3BlY2lmaWNhdGlvbidzIHVzYWdlIG9mIHZlcnNpb25zLiBJZiB0aGUgdmVyc2lvbiBpcyBub3Qgc3BlY2lmaWVkLCB0aGUKICBkZWZhdWx0IHZlcnNpb24gb2YgdGhlIHByb3RvY29sIGlzIGFzc3VtZWQuIEZvciBBTVFQIGFuZCBNUVRULCBzZWUgdGhlIGxpc3QKICBiZWxvdy4gRm9yIG90aGVycywgcmVmZXIgdG8gdGhlIHByb3RvY29sIHNwZWNpZmljYXRpb25zLgoKICBUaGUgcHJlZGVmaW5lZCBwcm90b2NvbCBuYW1lcyBhcmU6CiAgLSAiSFRUUCIgLSBVc2VkIGZvciBIVFRQLzEuMSwgSFRUUC8yLCBIVFRQLzMuCiAgLSAiQU1RUC8xLjAiIC0gVXNlIHRoZSBbQU1RUCAxLjBdW0FNUVAgMS4wXSBwcm90b2NvbC4gTUFZIGJlIHNob3J0ZW5lZCB0bwogICAgIkFNUVAiLiBBTVFQIGRyYWZ0IHZlcnNpb25zIGJlZm9yZSAxLjAgKGUuZy4gMC45KSBhcmUgKm5vdCogQU1RUC4KICAtICJNUVRULzMuMS4xIiwgIk1RVFQvNS4wIiAtIFVzZSB0aGUgTVFUVCBbMy4xLjFdW01RVFQgMy4xLjFdIG9yIFs1LjBdW01RVFQKICAgIDUuMF0gcHJvdG9jb2wuIFRoZSBzaG9ydGhhbmQgIk1RVFQiIG1hcHMgdG8gIk1RVFQvNS4wIi4KICAtICJOQVRTIiAtIFVzZSB0aGUgW05BVFNdW05BVFNdIHByb3RvY29sLgogIC0gIktBRktBIiAtIFVzZSB0aGUgW0FwYWNoZSBLYWZrYV1bQXBhY2hlIEthZmthXSBwcm90b2NvbC4KCiAgQWxsIG1lc3NhZ2VzIGluc2lkZSBhbiBFbmRwb2ludCBNVVNUIHVzZSB0aGlzIHNhbWUgcHJvdG9jb2wuCi0gQ29uc3RyYWludHM6CiAgLSBNVVNUIGJlIGEgbm9uLWVtcHR5IGNhc2UtaW5zZW5zaXRpdmUgc3RyaW5nLgogIC0gU0hPVUxEIGZvbGxvdyB0aGUgbmFtaW5nIGNvbnZlbnRpb24gYDxOQU1FPi88VkVSU0lPTj5gLAogICAgd2hlcmVieSBgPE5BTUU+YCBpcyB0aGUgbmFtZSBvZiB0aGUgcHJvdG9jb2wgYW5kIGA8VkVSU0lPTj5gIGlzIHRoZQogICAgdmVyc2lvbiBvZiBwcm90b2NvbC4KLSBFeGFtcGxlczoKICAtIGBNUVRULzMuMS4xYAogIC0gYEFNUVAvMS4wYAogIC0gYEtBRktBYAoKIyMjIyBgcHJvdG9jb2xvcHRpb25zYAoKLSBUeXBlOiBNYXAKLSBEZXNjcmlwdGlvbjogQ29uZmlndXJhdGlvbiBkZXRhaWxzIG9mIHRoZSBlbmRwb2ludCByZWxhdGVkIHRvIHRoZSBwcm90b2NvbAogIHVzZWQgdG8gdHJhbnNtaXQgdGhlIG1lc3NhZ2VzLiBBbiBlbmRwb2ludCBNQVkgYmUgZGVmaW5lZCB3aXRob3V0IGRldGFpbAogIGNvbmZpZ3VyYXRpb24uIEluIHRoaXMgY2FzZSwgdGhlIGVuZHBvaW50IGlzIGNvbnNpZGVyZWQgdG8gYmUgImFic3RyYWN0Ii4KCi0gQ29uc3RyYWludHM6CiAgLSBPUFRJT05BTC4KCiMjIyMjIGBwcm90b2NvbG9wdGlvbnMuZW5kcG9pbnRzYAoKLSBUeXBlOiBBcnJheSBvZiBPYmplY3RzCi0gRGVzY3JpcHRpb246IEFuIGFycmF5IG9mIG9iamVjdHMgbWFwIHdoZXJlIGVhY2ggb2JqZWN0IGNvbnRhaW5zIGEgYHVyaWAKICBhdHRyaWJ1dGUgd2l0aCB0aGUgbmV0d29yayBhZGRyZXNzIHRvIHdoaWNoIGNsaWVudHMgY2FuIGNvbW11bmljYXRlIHdpdGgKICB0aGUgZW5kcG9pbnQuIFRoZSBvYmplY3QgTUFZIGNvbnRhaW4gZXh0ZW5zaW9uIGF0dHJpYnV0ZXMgdGhhdCBjYW4gYmUgdXNlZAogIGJ5IGNsaWVudHMgdG8gZGV0ZXJtaW5lIHdoaWNoIFVSSSB0byB1c2UsIG9yIHRvIGNvbmZpZ3VyZSBhY2Nlc3MgdG8gdGhlCiAgc3BlY2lmaWMgVVJJLiBXaGV0aGVyIHRoZSBVUkkgaWRlbnRpZmllcyBhIG5ldHdvcmsgaG9zdCBvciBsaW5rcyBkaXJlY3RseSB0bwogIGEgcmVzb3VyY2UgbWFuYWdlZCBieSB0aGUgbmV0d29yayBob3N0IGlzIHByb3RvY29sIHNwZWNpZmljLgotIENvbnN0cmFpbnRzOgogIC0gT1BUSU9OQUwuCiAgLSBFYWNoIG9iamVjdCBNVVNUIGNvbnRhaW4gYSBgdXJpYCBhdHRyaWJ1dGUgd2l0aCBhIHZhbGlkLCBhYnNvbHV0ZSBVUkkgKFVSTCkuCi0gRXhhbXBsZXM6CiAgLSBgWyB7InVyaSI6ICJodHRwczovL2V4YW1wbGUuY29tIiB9IF1gCiAgLSBgYGAKICAgIFsKICAgICAgeyAidXJpIjogInRjcDovL2V4YW1wbGUuY29tIiB9LAogICAgICB7ICJ1cmkiOiAid3NzOi8vZXhhbXBsZS5jb20iIH0KICAgIF0KICAgIGBgYAogIC0gYGBgCiAgICBbCiAgICAgIHsKICAgICAgICAidXJpIjogInRjcDovL2V4YW1wbGUuY29tIiwKICAgICAgICAicHJpb3JpdHkiOiAxLAogICAgICAgICJzdGF0dXMiOiAiZG93biIKICAgICAgfSwKICAgICAgewogICAgICAgICJ1cmkiOiAid3NzOi8vZXhhbXBsZS5jb20iLAogICAgICAgICJwcmlvcml0eSI6IDIsCiAgICAgICAgInN0YXR1cyI6ICJ1cCIKICAgICAgfQogICAgXQogICAgYGBgCgojIyMjIyBgcHJvdG9jb2xvcHRpb25zLmF1dGhvcml6YXRpb25gCgotIFR5cGU6IE1hcAotIERlc2NyaXB0aW9uOiBPUFRJT05BTCBhdXRob3JpemF0aW9uIGNvbmZpZ3VyYXRpb24gZGV0YWlscyBvZiB0aGUgZW5kcG9pbnQuCiAgV2hlbiBzcGVjaWZpZWQsIHRoZSBhdXRob3JpemF0aW9uIGNvbmZpZ3VyYXRpb24gTVVTVCBiZSBhIG1hcCBvZiBub24tZW1wdHkKICBzdHJpbmdzIHRvIG5vbi1lbXB0eSBzdHJpbmdzLiBUaGUgY29uZmlndXJhdGlvbiBrZXlzIGJlbG93IE1VU1QgYmUgdXNlZCBhcwogIGRlZmluZWQuIEFkZGl0aW9uYWwsIGVuZHBvaW50LXNwZWNpZmljIGNvbmZpZ3VyYXRpb24ga2V5cyBNQVkgYmUgYWRkZWQuCgotIENvbnN0cmFpbnRzOgogIC0gT1BUSU9OQUwuCiAgLSBNVVNUIG9ubHkgYmUgdXNlZCBmb3IgYXV0aG9yaXphdGlvbiBjb25maWd1cmF0aW9uLgogIC0gTVVTVCBOT1QgYmUgdXNlZCBmb3IgY3JlZGVudGlhbCBjb25maWd1cmF0aW9uLgoKIyMjIyMjIGBwcm90b2NvbG9wdGlvbnMuYXV0aG9yaXphdGlvbi50eXBlYAoKLSBUeXBlOiBTdHJpbmcKLSBEZXNjcmlwdGlvbjogVGhlIHR5cGUgb2YgdGhlIGF1dGhvcml6YXRpb24gY29uZmlndXJhdGlvbi4gVGhlIHZhbHVlIFNIT1VMRCBiZQogIG9uZSBvZiB0aGUgZm9sbG93aW5nOgogIC0gT0F1dGgyOiBPQXV0aCAyLjAgYXV0aG9yaXphdGlvbiBpcyB1c2VkLgogIC0gUGxhaW46IFRoZSBjbGllbnQgdXNlcyB1c2VybmFtZSB3aXRoIGEgcGxhaW50ZXh0IHBhc3N3b3JkIGZvcgogICAgYXV0aGVudGljYXRpb24gYW5kIGF1dGhvcml6YXRpb24uCiAgLSBYNTA5Q2VydDogVGhlIGNsaWVudCB1c2VzIGNsaWVudCBjZXJ0aWZpY2F0ZSBhdXRoZW50aWNhdGlvbiBhbmQKICAgIGF1dGhvcml6YXRpb24uCiAgLSBBUElLZXk6IFRoZSBjbGllbnQgdXNlcyBhbiBBUEkga2V5IGZvciBhdXRoZW50aWNhdGlvbiBhbmQgYXV0aG9yaXphdGlvbi4KCi0gQ29uc3RyYWludHM6CiAgLSBPUFRJT05BTC4KICAtIE1VU1QgYmUgYSBub24tZW1wdHkgc3RyaW5nIGlmIHVzZWQuCgojIyMjIyMgYHByb3RvY29sb3B0aW9ucy5hdXRob3JpemF0aW9uLnJlc291cmNldXJpYAoKLSBUeXBlOiBVUkkKLSBEZXNjcmlwdGlvbjogVGhlIFVSSSBvZiB0aGUgcmVzb3VyY2UgZm9yIHdoaWNoIHRoZSBhdXRob3JpemF0aW9uIGlzCiAgcmVxdWVzdGVkLiBUaGUgZm9ybWF0IG9mIHRoZSBVUkkgZGVwZW5kcyBvbiB0aGUgYXV0aG9yaXphdGlvbiB0eXBlLgoKLSBDb25zdHJhaW50czoKICAtIE9QVElPTkFMLgogIC0gTVVTVCBiZSBhIG5vbi1lbXB0eSBVUkkgaWYgdXNlZC4KCiMjIyMjIyBgcHJvdG9jb2xvcHRpb25zLmF1dGhvcml6YXRpb24uYXV0aG9yaXR5dXJpYAoKLSBUeXBlOiBVUkkKLSBEZXNjcmlwdGlvbjogVGhlIFVSSSBvZiB0aGUgYXV0aG9yaXphdGlvbiBhdXRob3JpdHkgZnJvbSB3aGljaCB0aGUKICBhdXRob3JpemF0aW9uIGlzIHJlcXVlc3RlZC4gVGhlIGZvcm1hdCBvZiB0aGUgVVJJIGRlcGVuZHMgb24gdGhlCiAgYXV0aG9yaXphdGlvbiB0eXBlLgoKLSBDb25zdHJhaW50czoKICAtIE9QVElPTkFMLgogIC0gTVVTVCBiZSBhIG5vbi1lbXB0eSBVUkkgaWYgdXNlZC4KCiMjIyMjIyBgcHJvdG9jb2xvcHRpb25zLmF1dGhvcml6YXRpb24uZ3JhbnRfdHlwZXNgCgotIFR5cGU6IEFycmF5IG9mIFN0cmluZ3MKLSBEZXNjcmlwdGlvbjogVGhlIHN1cHBvcnRlZCBhdXRob3JpemF0aW9uIGdyYW50IHR5cGVzLiBUaGUgdmFsdWUgU0hPVUxEIGJlIGEKICBsaXN0IG9mIHN0cmluZ3MuCgotIENvbnN0cmFpbnRzOgogIC0gT1BUSU9OQUwuCiAgLSBNVVNUIGJlIGEgbm9uLWVtcHR5IGFycmF5IGlmIHVzZWQuCgojIyMjIyBgcHJvdG9jb2xvcHRpb25zLmRlcGxveWVkYAoKLSBUeXBlOiBCb29sZWFuCi0gRGVzY3JpcHRpb246IElmIGB0cnVlYCwgdGhlIGVuZHBvaW50IG1ldGFkYXRhIHJlcHJlc2VudHMgYSBwdWJsaWMsIGxpdmUKICBlbmRwb2ludCB0aGF0IGlzIGF2YWlsYWJsZSBmb3IgY29tbXVuaWNhdGlvbiBhbmQgYSBzdHJpY3QgdmFsaWRhdG9yIE1BWSB0ZXN0CiAgdGhlIGxpdmVuZXNzIG9mIHRoZSBlbmRwb2ludC4KLSBDb25zdHJhaW50czoKICAtIE9QVElPTkFMLgogIC0gSWYgcHJlc2VudCwgTVVTVCBiZSBlaXRoZXIgYHRydWVgIG9yIGBmYWxzZWAsIGNhc2Utc2Vuc2l0aXZlLgogIC0gV2hlbiBub3Qgc3BlY2lmaWVkLCB0aGUgZGVmYXVsdCB2YWx1ZSBpcyBNVVNUIGJlIGBmYWxzZWAuCgojIyMjIyBgcHJvdG9jb2xvcHRpb25zLm9wdGlvbnNgCgotIFR5cGU6IE1hcAotIERlc2NyaXB0aW9uOiBBZGRpdGlvbmFsIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIGVuZHBvaW50LiBUaGUKICBjb25maWd1cmF0aW9uIG9wdGlvbnMgYXJlIHByb3RvY29sIHNwZWNpZmljIGFuZCBkZXNjcmliZWQgaW4gdGhlCiAgW3Byb3RvY29sIG9wdGlvbnNdKCNwcm90b2NvbC1vcHRpb25zKSBzZWN0aW9uIGJlbG93LgotIENvbnN0cmFpbnRzOgogIC0gT1BUSU9OQUwuCiAgLSBXaGVuIHNwZWNpZmllZCwgTVVTVCBiZSBhIG1hcCBvZiBub24tZW1wdHkgc3RyaW5ncyB0byBgQU5ZYCB0eXBlIHZhbHVlcy4KICAtIElmIGBwcm90b2NvbG9wdGlvbnMucHJvdG9jb2xgIGlzIGEgd2VsbC1rbm93biBwcm90b2NvbCwgdGhlIG9wdGlvbnMgTVVTVCBiZQogICAgY29tcGxpYW50IHdpdGggdGhlIFtwcm90b2NvbCdzIG9wdGlvbnNdKCNwcm90b2NvbC1vcHRpb25zKS4KCiMjIyMgYG1lc3NhZ2Vncm91cHNgCgpUaGUgYG1lc3NhZ2Vncm91cHNgIGF0dHJpYnV0ZSBpcyBhbiBhcnJheSBvZiBYSUQtcmVmZXJlbmNlcyB0byBtZXNzYWdlCmRlZmluaXRpb24gZ3JvdXBzLiBUaGUgYG1lc3NhZ2Vncm91cHNgIGF0dHJpYnV0ZSBpcyB1c2VkIHRvIHJlZmVyZW5jZQptZXNzYWdlIGRlZmluaXRpb24gZ3JvdXBzIHRoYXQgYXJlIG5vdCBpbmxpbmVkIGluIHRoZSBlbmRwb2ludCBkZWZpbml0aW9uLgoKRXhhbXBsZToKCmBgYHlhbWwKewogICJwcm90b2NvbCI6ICJIVFRQLzEuMSIsCiAgInByb3RvY29sb3B0aW9ucyI6IHsKICAgICJtZXRob2QiOiAiUE9TVCIKICB9LAogICJtZXNzYWdlZ3JvdXBzIjogWwogICAgIi9tZXNzYWdlZ3JvdXBzL215Z3JvdXAiCiAgXQp9CmBgYAoKIyMjIyBgbWVzc2FnZXNgCgpFbmRwb2ludHMgYXJlIHN1cGVyc2V0cyBvZgpbbWVzc2FnZSBkZWZpbml0aW9uIGdyb3Vwc10oLi4vbWVzc2FnZS9zcGVjLm1kI21lc3NhZ2UtZGVmaW5pdGlvbi1ncm91cHMpIGFuZApNQVkgY29udGFpbiBpbmxpbmVkIG1lc3NhZ2VzLiBTZWUKW01lc3NhZ2UgRGVmaW5pdGlvbnNdKC4uL21lc3NhZ2Uvc3BlYy5tZCNtZXNzYWdlLWRlZmluaXRpb25zKS4KCkV4YW1wbGU6CgpgYGB5YW1sCnsKICAicHJvdG9jb2wiOiAiSFRUUC8xLjEiLAogICJwcm90b2NvbG9wdGlvbnMiOiB7CiAgICAibWV0aG9kIjogIlBPU1QiCiAgfSwKCiAgIm1lc3NhZ2VzdXJsIjogIi4uLiIsCiAgIm1lc3NhZ2VzY291bnQiOiAxLAogICJtZXNzYWdlcyI6IHsKICAgICJteWV2ZW50IjogewogICAgICAiZW52ZWxvcGUiOiAiQ2xvdWRFdmVudHMvMS4wIiwKICAgICAgImVudmVsb3BlbWV0YWRhdGEiOiB7CiAgICAgICAgImF0dHJpYnV0ZXMiOiB7CiAgICAgICAgICAidHlwZSI6IHsKICAgICAgICAgICAgInZhbHVlIjogIm15ZXZlbnQiCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQp9CmBgYAoKV2hlbiB0aGlzIHNwZWNpZmljYXRpb24sIGFuZCB0aGUgW21lc3NhZ2Ugc3BlY2lmaWNhdGlvbl0oLi4vbWVzc2FnZS9zcGVjLm1kKSwKYXJlIHVzZWQgd2l0aCBzcGVjaWZpY2F0aW9ucyBzdWNoIGFzIFtDbG91ZEV2ZW50c10oaHR0cHM6Ly9jbG91ZGV2ZW50cy5pbyksCndoZXJlIGEgc2VtYW50aWNhbGx5IHVuaXF1ZSBpZGVudGlmaWVyIGlzIHVzZWQgaW4gYSBydW50aW1lIG1lc3NhZ2UgKGUuZy4KQ2xvdWRFdmVudCdzIGB0eXBlYCBhdHRyaWJ1dGUpLCBpdCBpcyBTVFJPTkdMWSBSRUNPTU1FTkRFRCB0aGF0IHRoZQpgbWVzc2FnZWlkYCB2YWx1ZXMgb2YgdGhlIG1lc3NhZ2UgZGVmaW5pdGlvbnMgZm9yIGFuIEVuZHBvaW50IG1hdGNoIHRoYXQKdW5pcXVlIGlkZW50aWZpZXIgYW5kIHRoZXJlZm9yZSBiZSB1bmlxdWUgYWNyb3NzIGFsbCBtZXNzYWdlcyB3aXRoaW4gdGhlCmBtZXNzYWdlc2AgY29sbGVjdGlvbiBhbmQgdGhlIG1lc3NhZ2VzIHJlZmVyZW5jZWQgYnkgdGhlIGBtZXNzYWdlZ3JvdXBzYAphdHRyaWJ1dGUuIFRoaXMgd2lsbCBhbGxvdyBmb3IgYW4gZWFzeSAibG9va3VwIiBmcm9tIGFuIGluY29taW5nIHJ1bnRpbWUKbWVzc2FnZSB0byBpdHMgcmVsYXRlZCBtZXNzYWdlIGRlZmluaXRpb24uCgpIb3dldmVyLCB0aGVyZSBhcmUgdGltZXMgd2hlbiB0aGlzIGlzIG5vdCBwb3NzaWJsZS4gRm9yIGV4YW1wbGUsIHRha2UgdGhlIGNhc2UKd2hlcmUgYW4gRW5kcG9pbnQgbWlnaHQgaGF2ZSB0aGUgc2FtZSBzZW1hbnRpYyBtZXNzYWdlIGRlZmluZWQgdHdpY2UsIG9uY2UgZm9yCmEgSlNPTiBzZXJpYWxpemF0aW9uIGFuZCBvbmNlIGZvciBhbiBYTUwgc2VyaWFsaXphdGlvbi4gVXNpbmcgdGhlIHNhbWUKYG1lc3NhZ2VpZGAgdmFsdWUgaXMgbm90IHBvc3NpYmxlIChldmVuIHRob3VnaCB0aGUgQ2xvdWRFdmVudCBgdHlwZWAgYXR0cmlidXRlCndvdWxkIGJlIHRoZSBzYW1lIGZvciBib3RoIHJ1bnRpbWUgbWVzc2FnZXMpLCBzbyBvbmUgKG9yIGJvdGgpIG1lc3NhZ2UKZGVmaW5pdGlvbidzIGBtZXNzYWdlaWRgIHZhbHVlcyBtaWdodCBub3QgbWF0Y2ggdGhlIHJ1bnRpbWUgbWVzc2FnZSdzIGB0eXBlYAp2YWx1ZS4gSW4gdGhvc2UgY2FzZXMsIGZpbmRpbmcgdGhlIGFwcHJvcHJpYXRlIG1lc3NhZ2UgZGVmaW5pdGlvbiB3aWxsIG5lZWQgdG8KYmUgZG9uZSB2aWEgZXhhbWluYXRpb24gb2Ygc29tZSBvdGhlciBtZXRhZGF0YSAtIHN1Y2ggYXMgdGhlIG1lc3NhZ2UncwpgZW52ZWxvcGVtZXRhZGF0YS50eXBlYCB2YWx1ZSBhbG9uZyB3aXRoIGl0cyBgZW52ZWxvcGVvcHRpb25zLmZvcm1hdGAgdmFsdWUuClRoZXNlIGRldGFpbHMgYXJlIG91dCBvZiBzY29wZSBmb3IgdGhpcyBzcGVjaWZpY2F0aW9uIHRvIGRlZmluZSBhbmQgYXJlIGxlZnQgYXMKYW4gaW1wbGVtZW50YXRpb24gZGV0YWlsLgoKSW1wbGVtZW50YXRpb25zIE1BWSBjaG9vc2UgdG8gZ2VuZXJhdGUgYW4gZXJyb3IgaWYgaXQgZGV0ZWN0cyBkdXBsaWNhdGUKYG1lc3NhZ2VpZGAgdmFsdWVzIGFjcm9zcyB0aGUgYG1lc3NhZ2VzYCBjb2xsZWN0aW9uIG1lc3NhZ2UgZGVmaW5pdGlvbnMgYW5kCnRoZSBgbWVzc2FnZWdyb3Vwc2AgcmVmZXJlbmNlZCBtZXNzYWdlIGRlZmluaXRpb25zLCBpZiB0aGF0IGlzIHRoZSBkZXNpcmVkCmNvbnN0cmFpbnQgZm9yIHRoZWlyIHVzZXJzLgoKIyMjIyBQcm90b2NvbCBPcHRpb25zCgpUaGUgZm9sbG93aW5nIHByb3RvY29sIG9wdGlvbnMgKGBwcm90b2NvbG9wdGlvbnMub3B0aW9uc2ApIGFyZSBkZWZpbmVkIGZvciB0aGUKcmVzcGVjdGl2ZSBwcm90b2NvbHMuIEFsbCBvZiB0aGVzZSBhcmUgT1BUSU9OQUwuCgojIyMjIyBIVFRQIG9wdGlvbnMKClRoZSBbZW5kcG9pbnQgVVJJc10oI3Byb3RvY29sb3B0aW9uc2VuZHBvaW50cykgZm9yICJIVFRQIiBlbmRwb2ludHMgTVVTVCBiZQp2YWxpZCBIVFRQIFVSSXMgdXNpbmcgdGhlICJodHRwIiBvciAiaHR0cHMiIHNjaGVtZS4KClRoZSBmb2xsb3dpbmcgb3B0aW9ucyBhcmUgZGVmaW5lZCBmb3IgSFRUUDoKCi0gYG1ldGhvZGA6IFRoZSBIVFRQIG1ldGhvZCB0byB1c2UgZm9yIHRoZSBlbmRwb2ludC4KICAtIFdoZW4gbm90IHNwZWNpZmllZCwgdGhlIGRlZmF1bHQgdmFsdWUgTVVTVCBiZSBgUE9TVGAuCiAgLSBUaGUgdmFsdWUgTVVTVCBiZSBhIHZhbGlkIEhUVFAgbWV0aG9kIG5hbWUuCi0gYGhlYWRlcnNgOiBBbiBhcnJheSBvZiBIVFRQIGhlYWRlcnMgdG8gdXNlIGZvciB0aGUgZW5kcG9pbnQuIEhUVFAgYWxsb3dzIGZvcgogIGR1cGxpY2F0ZSBoZWFkZXJzLiBUaGUgb2JqZWN0cyBpbiB0aGUgYXJyYXkgaGF2ZSB0aGUgZm9sbG93aW5nIGF0dHJpYnV0ZXM6CiAgLSBgbmFtZWA6IFRoZSBuYW1lIG9mIHRoZSBIVFRQIGhlYWRlci4gVGhlIHZhbHVlIE1VU1QgYmUgYSBub24tZW1wdHkgc3RyaW5nLgogIC0gYHZhbHVlYDogVGhlIHZhbHVlIG9mIHRoZSBIVFRQIGhlYWRlci4gVGhlIHZhbHVlIE1VU1QgYmUgYSBub24tZW1wdHkKICAgIHN0cmluZy4KLSBgcXVlcnlgOiBBIG1hcCBvZiBIVFRQIHF1ZXJ5IHBhcmFtZXRlcnMgdG8gdXNlIGZvciB0aGUgZW5kcG9pbnQuIFRoZSB2YWx1ZQogIE1VU1QgYmUgYSBtYXAgb2Ygbm9uLWVtcHR5IHN0cmluZ3MgdG8gbm9uLWVtcHR5IHN0cmluZ3MuCgpUaGUgdmFsdWVzIG9mIGFsbCBgcXVlcnlgIGFuZCBgaGVhZGVyc2AgTUFZIGNvbnRhaW4gcGxhY2Vob2xkZXJzIHVzaW5nIHRoZQpbUkZDNjU3MF1bUkZDNjU3MF0gTGV2ZWwgMSBVUkkgVGVtcGxhdGUgc3ludGF4LiBXaGVuIHRoZSBzYW1lIHBsYWNlaG9sZGVyIGlzCnVzZWQgaW4gbXVsdGlwbGUgcHJvcGVydGllcywgdGhlIHZhbHVlIG9mIHRoZSBwbGFjZWhvbGRlciBpcyBhc3N1bWVkIHRvIGJlCmlkZW50aWNhbC4KCkV4YW1wbGU6CgpgYGB5YW1sCnsKICAicHJvdG9jb2wiOiAiSFRUUC8xLjEiLAogICJwcm90b2NvbG9wdGlvbnMiOiB7CiAgICAibWV0aG9kIjogIlBPU1QiLAogICAgImhlYWRlcnMiOiBbCiAgICAgIHsKICAgICAgICAibmFtZSI6ICJDb250ZW50LVR5cGUiLAogICAgICAgICJ2YWx1ZSI6ICJhcHBsaWNhdGlvbi9qc29uIgogICAgICB9CiAgICBdLAogICAgInF1ZXJ5IjogewogICAgICAib3BlcmF0aW9uIjogInNlbmQiCiAgICB9CiAgfQp9CmBgYAoKIyMjIyMgQU1RUCBvcHRpb25zCgpUaGUgW2VuZHBvaW50IFVSSXNdKCNwcm90b2NvbG9wdGlvbnNlbmRwb2ludHMpIGZvciAiQU1RUCIgZW5kcG9pbnRzIE1VU1QgYmUKdmFsaWQgQU1RUCBVUklzIHVzaW5nIHRoZSAiYW1xcCIgb3IgImFtcXBzIiBzY2hlbWUuIElmIHRoZSBwYXRoIHBvcnRpb24gb2YgdGhlClVSSSBpcyBwcmVzZW50LCBpdCBNVVNUIGJlIGEgdmFsaWQgQU1RUCBub2RlIG5hbWUuCgpUaGUgZm9sbG93aW5nIG9wdGlvbnMgYXJlIGRlZmluZWQgZm9yIEFNUVAgZW5kcG9pbnRzLgoKLSBgbm9kZWA6IFRoZSBuYW1lIG9mIHRoZSBBTVFQIG5vZGUgKGEgcXVldWUgb3IgdG9waWMgb3Igc29tZSBhZGRyZXNzYWJsZQogIGVudGl0eSkgdG8gdXNlIGZvciB0aGUgZW5kcG9pbnQuCiAgLSBXaGVuIHNwZWNpZmllZCwgdGhlIHZhbHVlIG92ZXJyaWRlcyB0aGUgcGF0aCBwb3J0aW9uIG9mIHRoZSBFbmRwb2ludCBVUkkuCi0gYGR1cmFibGVgOiBJZiBgdHJ1ZWAsIHRoZSBBTVFQIGBkdXJhYmxlYCBmbGFnIGlzIHNldCBvbiB0cmFuc2ZlcnMuCiAgLSBXaGVuIG5vdCBzcGVjaWZpZWQsIHRoZSBkZWZhdWx0IHZhbHVlIE1VU1QgYmUgYGZhbHNlYC4KICAtIFRoaXMgb3B0aW9uIG9ubHkgYXBwbGllcyB0byBgdXNhZ2U6cHJvZHVjZXJgIGVuZHBvaW50cy4KLSBgbGlua3Byb3BlcnRpZXNgOiBBIG1hcCBvZiBBTVFQIGxpbmsgcHJvcGVydGllcyB0byB1c2UgZm9yIHRoZSBlbmRwb2ludC4KICAtIFRoZSB2YWx1ZSBNVVNUIGJlIGEgbWFwIG9mIG5vbi1lbXB0eSBzdHJpbmdzIHRvIG5vbi1lbXB0eSBzdHJpbmdzLgotIGBjb25uZWN0aW9uLXByb3BlcnRpZXNgOiBBIG1hcCBvZiBBTVFQIGNvbm5lY3Rpb24gcHJvcGVydGllcyB0byB1c2UgZm9yIHRoZQogIGVuZHBvaW50LgogIC0gVGhlIHZhbHVlIE1VU1QgYmUgYSBtYXAgb2Ygbm9uLWVtcHR5IHN0cmluZ3MgdG8gbm9uLWVtcHR5IHN0cmluZ3MuCi0gYGRpc3RyaWJ1dGlvbm1vZGVgOiBFaXRoZXIgYG1vdmVgIG9yIGBjb3B5YC4KICAtIFdoZW4gbm90IHNwZWNpZmllZCwgdGhlIGRlZmF1bHQgdmFsdWUgTVVTVCBiZSBgbW92ZWAuCiAgLSBUaGUgZGlzdHJpYnV0aW9uIG1vZGUgaXMgQU1RUCdzIHdheSBvZiBleHByZXNzaW5nIHdoZXRoZXIgYSByZWNlaXZlcgogICAgb3BlcmF0ZXMgb24gY29waWVzIG9mIG1lc3NhZ2VzIChpdCdzIGEgdG9waWMgc3Vic2NyaWJlcikgb3Igd2hldGhlciBpdAogICAgbW92ZXMgbWVzc2FnZXMgZnJvbSB0aGUgcXVldWUgKGl0J3MgYSBxdWV1ZSBjb25zdW1lcikuIFRoaXMgb3B0aW9uIG9ubHkKICAgIGFwcGxpZXMgdG8gYHVzYWdlOmNvbnN1bWVyYCBlbmRwb2ludHMuCgpUaGUgdmFsdWVzIG9mIGFsbCBgbGlua3Byb3BlcnRpZXNgIGFuZCBgY29ubmVjdGlvbi1wcm9wZXJ0aWVzYCBNQVkgY29udGFpbgpwbGFjZWhvbGRlcnMgdXNpbmcgdGhlIFtSRkM2NTcwXVtSRkM2NTcwXSBMZXZlbCAxIFVSSSBUZW1wbGF0ZSBzeW50YXguIFdoZW4gdGhlCnNhbWUgcGxhY2Vob2xkZXIgaXMgdXNlZCBpbiBtdWx0aXBsZSBwcm9wZXJ0aWVzLCB0aGUgdmFsdWUgb2YgdGhlIHBsYWNlaG9sZGVyCmlzIGFzc3VtZWQgdG8gYmUgaWRlbnRpY2FsLgoKRXhhbXBsZToKCmBgYHlhbWwKewogICJ1c2FnZSI6IFsgInByb2R1Y2VyIiBdLAogICJwcm90b2NvbCI6ICJBTVFQLzEuMCIsCiAgInByb3RvY29sb3B0aW9ucyI6IHsKICAgICJub2RlIjogIm15cXVldWUiLAogICAgImR1cmFibGUiOiB0cnVlLAogICAgImxpbmtwcm9wZXJ0aWVzIjogewogICAgICAibXlsaW5rcHJvcGVydHkiOiAibXlsaW5rcHJvcGVydHl2YWx1ZSIKICAgIH0sCiAgICAiY29ubmVjdGlvbi1wcm9wZXJ0aWVzIjogewogICAgICAibXktY29ubmVjdGlvbi1wcm9wZXJ0eSI6ICJteS1jb25uZWN0aW9uLXByb3BlcnR5LXZhbHVlIgogICAgfSwKICAgICJkaXN0cmlidXRpb25tb2RlIjogIm1vdmUiCiAgfQp9CmBgYAoKIyMjIyMgTVFUVCBvcHRpb25zCgpUaGUgW2VuZHBvaW50IFVSSXNdKCNwcm90b2NvbG9wdGlvbnNlbmRwb2ludHMpIGZvciAiTVFUVCIgZW5kcG9pbnRzIE1VU1QgYmUKdmFsaWQgTVFUVCBVUklzIHVzaW5nIHRoZSAoaW5mb3JtYWwpICJtcXR0IiBvciAibXF0dHMiIHNjaGVtZS4gSWYgdGhlIHBhdGgKcG9ydGlvbiBvZiB0aGUgVVJJIGlzIHByZXNlbnQsIGl0IE1VU1QgYmUgYSB2YWxpZCBNUVRUIHRvcGljIG5hbWUuIFRoZSBpbmZvcm1hbApzY2hlbWVzICJ0Y3AiIChwbGFpbiBUQ1AvMTg4MyksICJzc2wiIChUTFMgVENQLzg4ODMpLCBhbmQgIndzcyIKKFdlYnNvY2tldHMvNDQzKSBNQVkgYWxzbyBiZSB1c2VkLCBidXQgTVVTVCBOT1QgaGF2ZSBhIHBhdGguCgpUaGUgZm9sbG93aW5nIG9wdGlvbnMgYXJlIGRlZmluZWQgZm9yIE1RVFQgZW5kcG9pbnRzLgoKLSBgdG9waWNgOiBUaGUgTVFUVCB0b3BpYyB0byB1c2UgZm9yIHRoZSBlbmRwb2ludC4KICAtIFdoZW4gc3BlY2lmaWVkLCB0aGUgdmFsdWUgb3ZlcnJpZGVzIHRoZSBwYXRoIHBvcnRpb24gb2YgdGhlIEVuZHBvaW50IFVSSS4KICAtIFRoZSB2YWx1ZSBNQVkgY29udGFpbiBwbGFjZWhvbGRlcnMgdXNpbmcgdGhlIFtSRkM2NTcwXVtSRkM2NTcwXSBMZXZlbCAxCiAgICBVUkkgVGVtcGxhdGUgc3ludGF4LgotIGBxb3NgOiBUaGUgTVFUVCBRdWFsaXR5IG9mIFNlcnZpY2UgKFFvUykgbGV2ZWwgdG8gdXNlIGZvciB0aGUgZW5kcG9pbnQuCiAgLSBUaGUgdmFsdWUgTVVTVCBiZSBhbiBpbnRlZ2VyIGJldHdlZW4gMCBhbmQgMi4KICAtIFdoZW4gbm90IHNwZWNpZmllZCwgdGhlIGRlZmF1bHQgdmFsdWUgTVVTVCBiZSAwLgogIC0gVGhlIHZhbHVlIGlzIG92ZXJpZGRlbiBieSB0aGUgYHFvc2AgcHJvcGVydHkgb2YgdGhlCiAgICBbTVFUVCBtZXNzYWdlIGZvcm1hdF0oLi4vbWVzc2FnZS9zcGVjLm1kI21xdHQzMTEtYW5kLW1xdHQ1MC1wcm90b2NvbHMpLgotIGByZXRhaW5gOiBJZiBgdHJ1ZWAsIHRoZSBNUVRUIGByZXRhaW5gIGZsYWcgaXMgc2V0IG9uIHRyYW5zZmVycy4KICAtIFdoZW4gbm90IHNwZWNpZmllZCwgdGhlIGRlZmF1bHQgdmFsdWUgaXMgYGZhbHNlYC4KICAtIFRoZSB2YWx1ZSBpcyBvdmVyaWRkZW4gYnkgdGhlIGByZXRhaW5gIHByb3BlcnR5IG9mIHRoZSBbTVFUVAogICAgbWVzc2FnZSBmb3JtYXRdKC4uL21lc3NhZ2Uvc3BlYy5tZCNtcXR0MzExLWFuZC1tcXR0NTAtcHJvdG9jb2xzKS4gVGhpcwogICAgb3B0aW9uIG9ubHkgYXBwbGllcyB0byBgdXNhZ2U6cHJvZHVjZXJgIGVuZHBvaW50cy4KLSBgY2xlYW5zZXNzaW9uYDogSWYgYHRydWVgLCB0aGUgTVFUVCBgY2xlYW5zZXNzaW9uYCBmbGFnIGlzIHNldCBvbgogIGNvbm5lY3Rpb25zLgogIC0gV2hlbiBub3Qgc3BlY2lmaWVkLCB0aGUgZGVmYXVsdCB2YWx1ZSBNVVNUIGJlIGB0cnVlYC4KLSBgd2lsbHRvcGljYDogVGhlIE1RVFQgYHdpbGx0b3BpY2AgdG8gdXNlIGZvciB0aGUgZW5kcG9pbnQuCiAgLSBUaGUgdmFsdWUgTVVTVCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcuCiAgLSBUaGUgdmFsdWUgTUFZIGNvbnRhaW4gcGxhY2Vob2xkZXJzIHVzaW5nIHRoZSBbUkZDNjU3MF1bUkZDNjU3MF0gTGV2ZWwgMQogICAgVVJJIFRlbXBsYXRlIHN5bnRheC4KLSBgd2lsbG1lc3NhZ2VgOiBUaGlzIGlzIGFuIFhJRCB0aGF0IHJlZmVycyB0byB0aGUgTVFUVCBgd2lsbG1lc3NhZ2VgIHRvIHVzZSBmb3IKICB0aGUgZW5kcG9pbnQuCiAgLSBUaGUgdmFsdWUgTVVTVCBiZSBhIG5vbi1lbXB0eSBYSUQuCiAgLSBJdCBNVVNUIHBvaW50IHRvIGEgdmFsaWQKICBbwrRtZXNzYWdlwrRdKC4uL21lc3NhZ2Uvc3BlYy5tZCNtZXNzYWdlLWRlZmluaXRpb25zKSB0aGF0IE1VU1QgZWl0aGVyCiAgdXNlIHRoZSBbIkNsb3VkRXZlbnRzLzEuMCJdKC4uL21lc3NhZ2Uvc3BlYy5tZCNjbG91ZGV2ZW50czEwKSBvcgogIFsiTVFUVC8zLjEuMS4iIG9yCiAgIk1RVFQvNS4wIl0oLi4vbWVzc2FnZS9zcGVjLm1kI21xdHQzMTEtYW5kLW1xdHQ1MC1wcm90b2NvbHMpCiAgW2BlbnZlbG9wZWBdKC4uL21lc3NhZ2Uvc3BlYy5tZCNlbnZlbG9wZSkuCgpFeGFtcGxlOgoKYGBgeWFtbAp7CiAgInVzYWdlIjogWyAicHJvZHVjZXIiIF0sCiAgInByb3RvY29sIjogIk1RVFQvNS4wIiwKICAicHJvdG9jb2xvcHRpb25zIjogewogICAgInRvcGljIjogIm15dG9waWMiLAogICAgInFvcyI6IDEsCiAgICAicmV0YWluIjogZmFsc2UsCiAgICAiY2xlYW5zZXNzaW9uIjogZmFsc2UsCiAgICAid2lsbHRvcGljIjogIm15dG9waWMiLAogICAgIndpbGxtZXNzYWdlIjogIi9tZXNzYWdlZ3JvdXBzL215Z3JvdXAvbWVzc2FnZXMvbXl3aWxsbWVzc2FnZSIKICB9Cn0KYGBgCgojIyMjIyBLQUZLQSBvcHRpb25zCgpUaGUgW2VuZHBvaW50IFVSSXNdKCNwcm90b2NvbG9wdGlvbnNlbmRwb2ludHMpIGZvciAiS2Fma2EiIGVuZHBvaW50cyBNVVNUIGJlCnZhbGlkIEthZmthIGJvb3RzdHJhcCBzZXJ2ZXIgYWRkcmVzc2VzLiBUaGUgc2NoZW1lIGZvbGxvd3MgS2Fma2EgY29uZmlndXJhdGlvbgp1c2FnZSwgZS5nLiBgU1NMOi8vPEhPU1Q+OjxQT1JUPmAgb3IgYFBMQUlOVEVYVDovLzxIT1NUPjo8UE9SVD5gLgoKVGhlIGZvbGxvd2luZyBvcHRpb25zIGFyZSBkZWZpbmVkIGZvciBLYWZrYSBlbmRwb2ludHMuCgotIGB0b3BpY2A6IFRoZSBLYWZrYSB0b3BpYyB0byB1c2UgZm9yIHRoZSBlbmRwb2ludC4KICAtIFdoZW4gc3BlY2lmaWVkLCB0aGUgdmFsdWUgTVVTVCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcuCiAgLSBUaGUgdmFsdWUgTUFZIGNvbnRhaW4gcGxhY2Vob2xkZXJzIHVzaW5nIHRoZSBbUkZDNjU3MF1bUkZDNjU3MF0gTGV2ZWwgMQogICAgVVJJIFRlbXBsYXRlIHN5bnRheC4KLSBgYWNrc2A6IFRoZSBLYWZrYSBgYWNrc2Agc2V0dGluZyB0byB1c2UgZm9yIHRoZSBlbmRwb2ludC4KICAtIFRoZSB2YWx1ZSBNVVNUIGJlIGFuIGludGVnZXIgYmV0d2VlbiAtMSBhbmQgMS4KICAtIFdoZW4gbm90IHNwZWNpZmllZCwgdGhlIGRlZmF1bHQgdmFsdWUgTVVTVCBiZSAxLgogIC0gVGhpcyBvcHRpb24gb25seSBhcHBsaWVzIHRvIGB1c2FnZTpwcm9kdWNlcmAgZW5kcG9pbnRzLgotIGBrZXlgOiBUaGUgZml4ZWQgS2Fma2Ega2V5IHRvIHVzZSBmb3IgdGhpcyBlbmRwb2ludC4KICAtIFdoZW4gc3BlY2lmaWVkLCB0aGUgdmFsdWUgTVVTVCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcuCiAgLSBUaGlzIG9wdGlvbiBvbmx5IGFwcGxpZXMgdG8gYHVzYWdlOnByb2R1Y2VyYCBlbmRwb2ludHMuCiAgLSBUaGUgdmFsdWUgTUFZIGNvbnRhaW4gcGxhY2Vob2xkZXJzIHVzaW5nIHRoZSBbUkZDNjU3MF1bUkZDNjU3MF0gTGV2ZWwgMQogICAgVVJJIFRlbXBsYXRlIHN5bnRheC4KLSBgcGFydGl0aW9uYDogVGhlIGZpeGVkIEthZmthIHBhcnRpdGlvbiB0byB1c2UgZm9yIHRoaXMgZW5kcG9pbnQuCiAgLSBXaGVuIHNwZWNpZmllZCwgdGhlIHZhbHVlIE1VU1QgYmUgYW4gaW50ZWdlci4KICAtIFRoaXMgb3B0aW9uIG9ubHkgYXBwbGllcyB0byBgdXNhZ2U6cHJvZHVjZXJgIGVuZHBvaW50cy4KLSBgY29uc3VtZXJncm91cGA6IFRoZSBLYWZrYSBjb25zdW1lciBncm91cCB0byB1c2UgZm9yIHRoaXMgZW5kcG9pbnQuCiAgLSBXaGVuIHNwZWNpZmllZCwgdGhlIHZhbHVlIE1VU1QgYmUgYSBub24tZW1wdHkgc3RyaW5nLgogIC0gVGhpcyBvcHRpb24gb25seSBhcHBsaWVzIHRvIGB1c2FnZTpjb25zdW1lcmAgZW5kcG9pbnRzLgogIC0gVGhlIHZhbHVlIE1BWSBjb250YWluIHBsYWNlaG9sZGVycyB1c2luZyB0aGUgW1JGQzY1NzBdW1JGQzY1NzBdIExldmVsIDEKICAgIFVSSSBUZW1wbGF0ZSBzeW50YXguCgpFeGFtcGxlOgoKYGBgeWFtbAp7CiAgInVzYWdlIjogWyAicHJvZHVjZXIiIF0sCiAgInByb3RvY29sIjogIkthZmthLzIuMCIsCiAgInByb3RvY29sb3B0aW9ucyI6IHsKICAgICJ0b3BpYyI6ICJteXRvcGljIiwKICAgICJhY2tzIjogMSwKICAgICJrZXkiOiAibXlrZXkiLAogIH0KfQpgYGAKCiMjIyMjIE5BVFMgb3B0aW9ucwoKVGhlIFtlbmRwb2ludCBVUklzXSgjcHJvdG9jb2xvcHRpb25zZW5kcG9pbnRzKSBmb3IgIk5BVFMiIGVuZHBvaW50cyBNVVNUIGJlCnZhbGlkIE5BVFMgVVJJcy4gVGhlIHNjaGVtZSBNVVNUIGJlICJuYXRzIiBvciAidGxzIiBvciAid3MiIGFuZCB0aGUgVVJJIE1VU1QKaW5jbHVkZSBhIHBvcnQgbnVtYmVyLCBlLmcuIGBuYXRzOi8vPEhPU1Q+OjxQT1JUPmAgb3IgYHRsczovLzxIT1NUPjo8UE9SVD5gLgoKVGhlIGZvbGxvd2luZyBvcHRpb25zIGFyZSBkZWZpbmVkIGZvciBOQVRTIGVuZHBvaW50cy4KCi0gYHN1YmplY3RgOiBUaGUgTkFUUyBzdWJqZWN0IHRvIHVzZS4KICAtIFRoZSB2YWx1ZSBNQVkgY29udGFpbiBwbGFjZWhvbGRlcnMgdXNpbmcgdGhlIFtSRkM2NTcwXVtSRkM2NTcwXSBMZXZlbCAxCiAgICBVUkkgVGVtcGxhdGUgc3ludGF4LgoKRXhhbXBsZToKCmBgYHlhbWwKewogICJ1c2FnZSI6IFsgInByb2R1Y2VyIiBdLAogICJwcm90b2NvbCI6ICJOQVRTLzEuMC4wIiwKICAicHJvdG9jb2xvcHRpb25zIjogewogICAgInN1YmplY3QiOiAibXlzdWJqZWN0IgogIH0KfQpgYGAKCltKU09OIFBvaW50ZXJdOiBodHRwczovL3d3dy5yZmMtZWRpdG9yLm9yZy9yZmMvcmZjNjkwMQpbQ2xvdWRFdmVudHMgVHlwZXNdOiBodHRwczovL2dpdGh1Yi5jb20vY2xvdWRldmVudHMvc3BlYy9ibG9iL3YxLjAuMi9jbG91ZGV2ZW50cy9zcGVjLm1kI3R5cGUtc3lzdGVtCltBTVFQIDEuMF06IGh0dHBzOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy9hbXFwL2NvcmUvdjEuMC9vcy9hbXFwLWNvcmUtb3ZlcnZpZXctdjEuMC1vcy5odG1sCltBTVFQIDEuMCBNZXNzYWdlIEZvcm1hdF06IGh0dHA6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL2FtcXAvY29yZS92MS4wL29zL2FtcXAtY29yZS1tZXNzYWdpbmctdjEuMC1vcy5odG1sI3NlY3Rpb24tbWVzc2FnZS1mb3JtYXQKW0FNUVAgMS4wIE1lc3NhZ2UgUHJvcGVydGllc106IGh0dHA6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL2FtcXAvY29yZS92MS4wL29zL2FtcXAtY29yZS1tZXNzYWdpbmctdjEuMC1vcy5odG1sI3R5cGUtcHJvcGVydGllcwpbQU1RUCAxLjAgQXBwbGljYXRpb24gUHJvcGVydGllc106IGh0dHA6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL2FtcXAvY29yZS92MS4wL29zL2FtcXAtY29yZS1tZXNzYWdpbmctdjEuMC1vcy5odG1sI3R5cGUtYXBwbGljYXRpb24tcHJvcGVydGllcwpbQU1RUCAxLjAgTWVzc2FnZSBBbm5vdGF0aW9uc106IGh0dHA6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL2FtcXAvY29yZS92MS4wL29zL2FtcXAtY29yZS1tZXNzYWdpbmctdjEuMC1vcy5odG1sI3R5cGUtbWVzc2FnZS1hbm5vdGF0aW9ucwpbQU1RUCAxLjAgRGVsaXZlcnkgQW5ub3RhdGlvbnNdOiBodHRwOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy9hbXFwL2NvcmUvdjEuMC9vcy9hbXFwLWNvcmUtbWVzc2FnaW5nLXYxLjAtb3MuaHRtbCN0eXBlLWRlbGl2ZXJ5LWFubm90YXRpb25zCltBTVFQIDEuMCBNZXNzYWdlIEhlYWRlcl06IGh0dHA6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL2FtcXAvY29yZS92MS4wL29zL2FtcXAtY29yZS1tZXNzYWdpbmctdjEuMC1vcy5odG1sI3R5cGUtaGVhZGVyCltBTVFQIDEuMCBNZXNzYWdlIEZvb3Rlcl06IGh0dHA6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL2FtcXAvY29yZS92MS4wL29zL2FtcXAtY29yZS1tZXNzYWdpbmctdjEuMC1vcy5odG1sI3R5cGUtZm9vdGVyCltNUVRUIDUuMF06IGh0dHBzOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy9tcXR0L21xdHQvdjUuMC9tcXR0LXY1LjAuaHRtbApbTVFUVCAzLjEuMV06IGh0dHBzOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy9tcXR0L21xdHQvdjMuMS4xL21xdHQtdjMuMS4xLmh0bWwKW0Nsb3VkRXZlbnRzXTogaHR0cHM6Ly9naXRodWIuY29tL2Nsb3VkZXZlbnRzL3NwZWMvYmxvYi9tYWluL2Nsb3VkZXZlbnRzL3NwZWMubWQKW0Nsb3VkRXZlbnRzIFN1YnNjcmlwdGlvbnMgQVBJXTogaHR0cHM6Ly9naXRodWIuY29tL2Nsb3VkZXZlbnRzL3NwZWMvYmxvYi9tYWluL3N1YnNjcmlwdGlvbnMvc3BlYy5tZApbTkFUU106IGh0dHBzOi8vZG9jcy5uYXRzLmlvL3JlZmVyZW5jZS9yZWZlcmVuY2UtcHJvdG9jb2xzL25hdHMtcHJvdG9jb2wKW0FwYWNoZSBLYWZrYV06IGh0dHBzOi8va2Fma2EuYXBhY2hlLm9yZy9wcm90b2NvbApbQXBhY2hlIEthZmthIHByb2R1Y2VyXTogaHR0cHM6Ly9rYWZrYS5hcGFjaGUub3JnLzMxL2phdmFkb2Mvb3JnL2FwYWNoZS9rYWZrYS9jbGllbnRzL3Byb2R1Y2VyL1Byb2R1Y2VyUmVjb3JkLmh0bWwKW0FwYWNoZSBLYWZrYSBjb25zdW1lcl06IGh0dHBzOi8va2Fma2EuYXBhY2hlLm9yZy8zMS9qYXZhZG9jL29yZy9hcGFjaGUva2Fma2EvY2xpZW50cy9jb25zdW1lci9Db25zdW1lclJlY29yZC5odG1sCltIVFRQIE1lc3NhZ2UgRm9ybWF0XTogaHR0cHM6Ly93d3cucmZjLWVkaXRvci5vcmcvcmZjL3JmYzkxMTAjc2VjdGlvbi02CltSRkM2NTcwXTogaHR0cHM6Ly93d3cucmZjLWVkaXRvci5vcmcvcmZjL3JmYzY1NzAKW3JmYzMzMzldOiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzMzOQo="
            }
          },
          "versionscount": 1
        }
      },
      "docscount": 2,
      "samplesurl": "#/xregistryspecs/endpoint-v1/samples",
      "samples": {},
      "samplescount": 0,
      "schemasurl": "#/xregistryspecs/endpoint-v1/schemas",
      "schemas": {
        "document-schema.avsc": {
          "schemaid": "document-schema.avsc",
          "self": "#/xregistryspecs/endpoint-v1/schemas/document-schema.avsc",
          "xid": "/xregistryspecs/endpoint-v1/schemas/document-schema.avsc",
          "metaurl": "#/xregistryspecs/endpoint-v1/schemas/document-schema.avsc/meta",
          "meta": {
            "schemaid": "document-schema.avsc",
            "self": "#/xregistryspecs/endpoint-v1/schemas/document-schema.avsc/meta",
            "xid": "/xregistryspecs/endpoint-v1/schemas/document-schema.avsc/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:34.721963769Z",
            "modifiedat": "2025-08-20T15:03:34.721963769Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/endpoint-v1/schemas/document-schema.avsc/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/endpoint-v1/schemas/document-schema.avsc/versions",
          "versions": {
            "v1.0-rc1": {
              "schemaid": "document-schema.avsc",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/endpoint-v1/schemas/document-schema.avsc/versions/v1.0-rc1",
              "xid": "/xregistryspecs/endpoint-v1/schemas/document-schema.avsc/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:34.721963769Z",
              "modifiedat": "2025-08-20T15:03:34.721963769Z",
              "ancestor": "v1.0-rc1",
              "schemabase64": ""
            }
          },
          "versionscount": 1
        },
        "document-schema.json": {
          "schemaid": "document-schema.json",
          "self": "#/xregistryspecs/endpoint-v1/schemas/document-schema.json",
          "xid": "/xregistryspecs/endpoint-v1/schemas/document-schema.json",
          "metaurl": "#/xregistryspecs/endpoint-v1/schemas/document-schema.json/meta",
          "meta": {
            "schemaid": "document-schema.json",
            "self": "#/xregistryspecs/endpoint-v1/schemas/document-schema.json/meta",
            "xid": "/xregistryspecs/endpoint-v1/schemas/document-schema.json/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:34.779060039Z",
            "modifiedat": "2025-08-20T15:03:34.779060039Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/endpoint-v1/schemas/document-schema.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/endpoint-v1/schemas/document-schema.json/versions",
          "versions": {
            "v1.0-rc1": {
              "schemaid": "document-schema.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/endpoint-v1/schemas/document-schema.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/endpoint-v1/schemas/document-schema.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:34.779060039Z",
              "modifiedat": "2025-08-20T15:03:34.779060039Z",
              "ancestor": "v1.0-rc1",
              "schemabase64": ""
            }
          },
          "versionscount": 1
        },
        "openapi.json": {
          "schemaid": "openapi.json",
          "self": "#/xregistryspecs/endpoint-v1/schemas/openapi.json",
          "xid": "/xregistryspecs/endpoint-v1/schemas/openapi.json",
          "metaurl": "#/xregistryspecs/endpoint-v1/schemas/openapi.json/meta",
          "meta": {
            "schemaid": "openapi.json",
            "self": "#/xregistryspecs/endpoint-v1/schemas/openapi.json/meta",
            "xid": "/xregistryspecs/endpoint-v1/schemas/openapi.json/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:34.8397819Z",
            "modifiedat": "2025-08-20T15:03:34.8397819Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/endpoint-v1/schemas/openapi.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/endpoint-v1/schemas/openapi.json/versions",
          "versions": {
            "v1.0-rc1": {
              "schemaid": "openapi.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/endpoint-v1/schemas/openapi.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/endpoint-v1/schemas/openapi.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:34.8397819Z",
              "modifiedat": "2025-08-20T15:03:34.8397819Z",
              "ancestor": "v1.0-rc1",
              "schemabase64": ""
            }
          },
          "versionscount": 1
        }
      },
      "schemascount": 3
    },
    "message-v1": {
      "xregistryspecid": "message-v1",
      "self": "#/xregistryspecs/message-v1",
      "xid": "/xregistryspecs/message-v1",
      "epoch": 5,
      "createdat": "2025-08-20T15:03:34.901561806Z",
      "modifiedat": "2025-08-20T15:03:35.146784863Z",
      "docsurl": "#/xregistryspecs/message-v1/docs",
      "docs": {
        "model.json": {
          "docid": "model.json",
          "self": "#/xregistryspecs/message-v1/docs/model.json",
          "xid": "/xregistryspecs/message-v1/docs/model.json",
          "metaurl": "#/xregistryspecs/message-v1/docs/model.json/meta",
          "meta": {
            "docid": "model.json",
            "self": "#/xregistryspecs/message-v1/docs/model.json/meta",
            "xid": "/xregistryspecs/message-v1/docs/model.json/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:34.901561806Z",
            "modifiedat": "2025-08-20T15:03:34.901561806Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/message-v1/docs/model.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/message-v1/docs/model.json/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "model.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/message-v1/docs/model.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/message-v1/docs/model.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:34.901561806Z",
              "modifiedat": "2025-08-20T15:03:34.901561806Z",
              "ancestor": "v1.0-rc1",
              "docbase64": ""
            }
          },
          "versionscount": 1
        },
        "spec.md": {
          "docid": "spec.md",
          "self": "#/xregistryspecs/message-v1/docs/spec.md",
          "xid": "/xregistryspecs/message-v1/docs/spec.md",
          "metaurl": "#/xregistryspecs/message-v1/docs/spec.md/meta",
          "meta": {
            "docid": "spec.md",
            "self": "#/xregistryspecs/message-v1/docs/spec.md/meta",
            "xid": "/xregistryspecs/message-v1/docs/spec.md/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:34.965685229Z",
            "modifiedat": "2025-08-20T15:03:34.965685229Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/message-v1/docs/spec.md/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/message-v1/docs/spec.md/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "spec.md",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/message-v1/docs/spec.md/versions/v1.0-rc1",
              "xid": "/xregistryspecs/message-v1/docs/spec.md/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:34.965685229Z",
              "modifiedat": "2025-08-20T15:03:34.965685229Z",
              "ancestor": "v1.0-rc1",
              "docbase64": ""
            }
          },
          "versionscount": 1
        }
      },
      "docscount": 2,
      "samplesurl": "#/xregistryspecs/message-v1/samples",
      "samples": {},
      "samplescount": 0,
      "schemasurl": "#/xregistryspecs/message-v1/schemas",
      "schemas": {
        "document-schema.avsc": {
          "schemaid": "document-schema.avsc",
          "self": "#/xregistryspecs/message-v1/schemas/document-schema.avsc",
          "xid": "/xregistryspecs/message-v1/schemas/document-schema.avsc",
          "metaurl": "#/xregistryspecs/message-v1/schemas/document-schema.avsc/meta",
          "meta": {
            "schemaid": "document-schema.avsc",
            "self": "#/xregistryspecs/message-v1/schemas/document-schema.avsc/meta",
            "xid": "/xregistryspecs/message-v1/schemas/document-schema.avsc/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:35.025984657Z",
            "modifiedat": "2025-08-20T15:03:35.025984657Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/message-v1/schemas/document-schema.avsc/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/message-v1/schemas/document-schema.avsc/versions",
          "versions": {
            "v1.0-rc1": {
              "schemaid": "document-schema.avsc",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/message-v1/schemas/document-schema.avsc/versions/v1.0-rc1",
              "xid": "/xregistryspecs/message-v1/schemas/document-schema.avsc/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:35.025984657Z",
              "modifiedat": "2025-08-20T15:03:35.025984657Z",
              "ancestor": "v1.0-rc1",
              "schemabase64": ""
            }
          },
          "versionscount": 1
        },
        "document-schema.json": {
          "schemaid": "document-schema.json",
          "self": "#/xregistryspecs/message-v1/schemas/document-schema.json",
          "xid": "/xregistryspecs/message-v1/schemas/document-schema.json",
          "metaurl": "#/xregistryspecs/message-v1/schemas/document-schema.json/meta",
          "meta": {
            "schemaid": "document-schema.json",
            "self": "#/xregistryspecs/message-v1/schemas/document-schema.json/meta",
            "xid": "/xregistryspecs/message-v1/schemas/document-schema.json/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:35.085528074Z",
            "modifiedat": "2025-08-20T15:03:35.085528074Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/message-v1/schemas/document-schema.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/message-v1/schemas/document-schema.json/versions",
          "versions": {
            "v1.0-rc1": {
              "schemaid": "document-schema.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/message-v1/schemas/document-schema.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/message-v1/schemas/document-schema.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:35.085528074Z",
              "modifiedat": "2025-08-20T15:03:35.085528074Z",
              "ancestor": "v1.0-rc1",
              "schemabase64": ""
            }
          },
          "versionscount": 1
        },
        "openapi.json": {
          "schemaid": "openapi.json",
          "self": "#/xregistryspecs/message-v1/schemas/openapi.json",
          "xid": "/xregistryspecs/message-v1/schemas/openapi.json",
          "metaurl": "#/xregistryspecs/message-v1/schemas/openapi.json/meta",
          "meta": {
            "schemaid": "openapi.json",
            "self": "#/xregistryspecs/message-v1/schemas/openapi.json/meta",
            "xid": "/xregistryspecs/message-v1/schemas/openapi.json/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:35.146784863Z",
            "modifiedat": "2025-08-20T15:03:35.146784863Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/message-v1/schemas/openapi.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/message-v1/schemas/openapi.json/versions",
          "versions": {
            "v1.0-rc1": {
              "schemaid": "openapi.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/message-v1/schemas/openapi.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/message-v1/schemas/openapi.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:35.146784863Z",
              "modifiedat": "2025-08-20T15:03:35.146784863Z",
              "ancestor": "v1.0-rc1",
              "schemabase64": ""
            }
          },
          "versionscount": 1
        }
      },
      "schemascount": 3
    },
    "pagination-v1": {
      "xregistryspecid": "pagination-v1",
      "self": "#/xregistryspecs/pagination-v1",
      "xid": "/xregistryspecs/pagination-v1",
      "epoch": 1,
      "createdat": "2025-08-20T15:03:35.561599292Z",
      "modifiedat": "2025-08-20T15:03:35.561599292Z",
      "docsurl": "#/xregistryspecs/pagination-v1/docs",
      "docs": {
        "spec.md": {
          "docid": "spec.md",
          "self": "#/xregistryspecs/pagination-v1/docs/spec.md",
          "xid": "/xregistryspecs/pagination-v1/docs/spec.md",
          "metaurl": "#/xregistryspecs/pagination-v1/docs/spec.md/meta",
          "meta": {
            "docid": "spec.md",
            "self": "#/xregistryspecs/pagination-v1/docs/spec.md/meta",
            "xid": "/xregistryspecs/pagination-v1/docs/spec.md/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:35.561599292Z",
            "modifiedat": "2025-08-20T15:03:35.561599292Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/pagination-v1/docs/spec.md/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/pagination-v1/docs/spec.md/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "spec.md",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/pagination-v1/docs/spec.md/versions/v1.0-rc1",
              "xid": "/xregistryspecs/pagination-v1/docs/spec.md/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:35.561599292Z",
              "modifiedat": "2025-08-20T15:03:35.561599292Z",
              "ancestor": "v1.0-rc1",
              "docbase64": ""
            }
          },
          "versionscount": 1
        }
      },
      "docscount": 1,
      "samplesurl": "#/xregistryspecs/pagination-v1/samples",
      "samples": {},
      "samplescount": 0,
      "schemasurl": "#/xregistryspecs/pagination-v1/schemas",
      "schemas": {},
      "schemascount": 0
    },
    "schema-v1": {
      "xregistryspecid": "schema-v1",
      "self": "#/xregistryspecs/schema-v1",
      "xid": "/xregistryspecs/schema-v1",
      "epoch": 5,
      "createdat": "2025-08-20T15:03:35.209124859Z",
      "modifiedat": "2025-08-20T15:03:35.478473093Z",
      "docsurl": "#/xregistryspecs/schema-v1/docs",
      "docs": {
        "model.json": {
          "docid": "model.json",
          "self": "#/xregistryspecs/schema-v1/docs/model.json",
          "xid": "/xregistryspecs/schema-v1/docs/model.json",
          "metaurl": "#/xregistryspecs/schema-v1/docs/model.json/meta",
          "meta": {
            "docid": "model.json",
            "self": "#/xregistryspecs/schema-v1/docs/model.json/meta",
            "xid": "/xregistryspecs/schema-v1/docs/model.json/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:35.209124859Z",
            "modifiedat": "2025-08-20T15:03:35.209124859Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/schema-v1/docs/model.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/schema-v1/docs/model.json/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "model.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/schema-v1/docs/model.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/schema-v1/docs/model.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:35.209124859Z",
              "modifiedat": "2025-08-20T15:03:35.209124859Z",
              "ancestor": "v1.0-rc1",
              "docbase64": "ewogICIkc2NoZW1hIjogImh0dHBzOi8veHJlZ2lzdHJ5LmlvL3hyZWdpc3RyeXNwZWNzL2NvcmUtdjEvc2NoZW1hcy9tb2RlbC5zY2hlbWEuanNvbiIsCiAgImdyb3VwcyI6IHsKICAgICJzY2hlbWFncm91cHMiOiB7CiAgICAgICJzaW5ndWxhciI6ICJzY2hlbWFncm91cCIsCiAgICAgICJtb2RlbHZlcnNpb24iOiAiMS4wLXJjMiIsCiAgICAgICJjb21wYXRpYmxld2l0aCI6ICJodHRwczovL3hyZWdpc3RyeS5pby94cmVnL2RvbWFpbnMvc2NoZW1hL3NwZWNzL21vZGVsLmpzb24iLAoKICAgICAgImF0dHJpYnV0ZXMiOiB7CiAgICAgICAgIioiOiB7CiAgICAgICAgICAibmFtZSI6ICIqIiwKICAgICAgICAgICJ0eXBlIjogImFueSIKICAgICAgICB9CiAgICAgIH0sCgogICAgICAicmVzb3VyY2VzIjogewogICAgICAgICJzY2hlbWFzIjogewogICAgICAgICAgInNpbmd1bGFyIjogInNjaGVtYSIsCiAgICAgICAgICAibW9kZWx2ZXJzaW9uIjogIjEuMC1yYzIiLAogICAgICAgICAgImNvbXBhdGlibGV3aXRoIjogImh0dHBzOi8veHJlZ2lzdHJ5LmlvL3hyZWcvZG9tYWlucy9zY2hlbWEvc3BlY3MvbW9kZWwuanNvbiIsCgogICAgICAgICAgImF0dHJpYnV0ZXMiOiB7CiAgICAgICAgICAgICJmb3JtYXQiOiB7CiAgICAgICAgICAgICAgIm5hbWUiOiAiZm9ybWF0IiwKICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJTY2hlbWEgZm9ybWF0IGlkZW50aWZpZXIgZm9yIHRoaXMgc2NoZW1hIHZlcnNpb24iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICIqIjogewogICAgICAgICAgICAgICJuYW1lIjogIioiLAogICAgICAgICAgICAgICJ0eXBlIjogImFueSIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgICJtZXRhYXR0cmlidXRlcyI6IHsKICAgICAgICAgICAgInZhbGlkYXRpb24iOiB7CiAgICAgICAgICAgICAgIm5hbWUiOiAidmFsaWRhdGlvbiIsCiAgICAgICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIsCiAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlZlcmlmeSBjb21wbGlhbmNlIHdpdGggc3BlY2lmaWVkIHNjaGVtYSAnZm9ybWF0JyIsCiAgICAgICAgICAgICAgInJlcXVpcmVkIjogdHJ1ZSwKICAgICAgICAgICAgICAiZGVmYXVsdCI6IGZhbHNlCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9Cn0K"
            }
          },
          "versionscount": 1
        },
        "spec.md": {
          "docid": "spec.md",
          "self": "#/xregistryspecs/schema-v1/docs/spec.md",
          "xid": "/xregistryspecs/schema-v1/docs/spec.md",
          "metaurl": "#/xregistryspecs/schema-v1/docs/spec.md/meta",
          "meta": {
            "docid": "spec.md",
            "self": "#/xregistryspecs/schema-v1/docs/spec.md/meta",
            "xid": "/xregistryspecs/schema-v1/docs/spec.md/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:35.271666733Z",
            "modifiedat": "2025-08-20T15:03:35.271666733Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/schema-v1/docs/spec.md/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/schema-v1/docs/spec.md/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "spec.md",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/schema-v1/docs/spec.md/versions/v1.0-rc1",
              "xid": "/xregistryspecs/schema-v1/docs/spec.md/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:35.271666733Z",
              "modifiedat": "2025-08-20T15:03:35.271666733Z",
              "ancestor": "v1.0-rc1",
              "docbase64": ""
            }
          },
          "versionscount": 1
        }
      },
      "docscount": 2,
      "samplesurl": "#/xregistryspecs/schema-v1/samples",
      "samples": {},
      "samplescount": 0,
      "schemasurl": "#/xregistryspecs/schema-v1/schemas",
      "schemas": {
        "document-schema.avsc": {
          "schemaid": "document-schema.avsc",
          "self": "#/xregistryspecs/schema-v1/schemas/document-schema.avsc",
          "xid": "/xregistryspecs/schema-v1/schemas/document-schema.avsc",
          "metaurl": "#/xregistryspecs/schema-v1/schemas/document-schema.avsc/meta",
          "meta": {
            "schemaid": "document-schema.avsc",
            "self": "#/xregistryspecs/schema-v1/schemas/document-schema.avsc/meta",
            "xid": "/xregistryspecs/schema-v1/schemas/document-schema.avsc/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:35.338091474Z",
            "modifiedat": "2025-08-20T15:03:35.338091474Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/schema-v1/schemas/document-schema.avsc/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/schema-v1/schemas/document-schema.avsc/versions",
          "versions": {
            "v1.0-rc1": {
              "schemaid": "document-schema.avsc",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/schema-v1/schemas/document-schema.avsc/versions/v1.0-rc1",
              "xid": "/xregistryspecs/schema-v1/schemas/document-schema.avsc/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:35.338091474Z",
              "modifiedat": "2025-08-20T15:03:35.338091474Z",
              "ancestor": "v1.0-rc1",
              "schemabase64": ""
            }
          },
          "versionscount": 1
        },
        "document-schema.json": {
          "schemaid": "document-schema.json",
          "self": "#/xregistryspecs/schema-v1/schemas/document-schema.json",
          "xid": "/xregistryspecs/schema-v1/schemas/document-schema.json",
          "metaurl": "#/xregistryspecs/schema-v1/schemas/document-schema.json/meta",
          "meta": {
            "schemaid": "document-schema.json",
            "self": "#/xregistryspecs/schema-v1/schemas/document-schema.json/meta",
            "xid": "/xregistryspecs/schema-v1/schemas/document-schema.json/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:35.406966931Z",
            "modifiedat": "2025-08-20T15:03:35.406966931Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/schema-v1/schemas/document-schema.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/schema-v1/schemas/document-schema.json/versions",
          "versions": {
            "v1.0-rc1": {
              "schemaid": "document-schema.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/schema-v1/schemas/document-schema.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/schema-v1/schemas/document-schema.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:35.406966931Z",
              "modifiedat": "2025-08-20T15:03:35.406966931Z",
              "ancestor": "v1.0-rc1",
              "schemabase64": ""
            }
          },
          "versionscount": 1
        },
        "openapi.json": {
          "schemaid": "openapi.json",
          "self": "#/xregistryspecs/schema-v1/schemas/openapi.json",
          "xid": "/xregistryspecs/schema-v1/schemas/openapi.json",
          "metaurl": "#/xregistryspecs/schema-v1/schemas/openapi.json/meta",
          "meta": {
            "schemaid": "openapi.json",
            "self": "#/xregistryspecs/schema-v1/schemas/openapi.json/meta",
            "xid": "/xregistryspecs/schema-v1/schemas/openapi.json/meta",
            "epoch": 1,
            "createdat": "2025-08-20T15:03:35.478473093Z",
            "modifiedat": "2025-08-20T15:03:35.478473093Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/schema-v1/schemas/openapi.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/schema-v1/schemas/openapi.json/versions",
          "versions": {
            "v1.0-rc1": {
              "schemaid": "openapi.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/schema-v1/schemas/openapi.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/schema-v1/schemas/openapi.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-08-20T15:03:35.478473093Z",
              "modifiedat": "2025-08-20T15:03:35.478473093Z",
              "ancestor": "v1.0-rc1",
              "schemabase64": ""
            }
          },
          "versionscount": 1
        }
      },
      "schemascount": 3
    }
  },
  "xregistryspecscount": 6,
  "xregistryspecsurl": "#/xregistryspecs"
}